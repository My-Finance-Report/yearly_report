// This file is auto-generated by @hey-api/openapi-ts

export type AggregatedGroup = {
  group_id: number | string;
  group_name: string;
  groupby_kind: GroupByOption | null;
  total_withdrawals: number;
  total_deposits: number;
  total_balance: number;
  budgeted_total: number;
  subgroups?: Array<AggregatedGroup>;
  transactions?: Array<TransactionOut>;
};

export type AggregatedTransactions = {
  groups: Array<AggregatedGroup>;
  overall_withdrawals: number;
  group_by_ordering: Array<GroupByOption>;
  overall_deposits: number;
  overall_balance: number;
  grouping_options_choices: {
    [key: string]: Array<string>;
  };
};

export type Body_login_login_access_token = {
  grant_type?: string | null;
  username: string;
  password: string;
  scope?: string;
  client_id?: string | null;
  client_secret?: string | null;
};

export type Body_uploads_upload_files = {
  files: Array<Blob | File>;
};

export type BudgetCategoryLinkBase = {
  budget_entry_id: number;
  category_id: number;
};

export type BudgetCategoryLinkCreate = {
  entry_id: number;
  category_id: number;
};

export type BudgetCategoryLinkOut = {
  budget_entry_id: number;
  category_id: number;
  id: number;
  stylized_name: string;
};

export type BudgetCategoryLinkStatus = {
  budget_entry_id: number;
  category_id: number;
  id: number;
  stylized_name: string;
  transactions: Array<TransactionOut>;
  total: string;
};

export type BudgetEntryCreate = {
  amount: number;
  name: string;
  budget_id: number;
  category_link_ids: Array<number>;
};

export type BudgetEntryEdit = {
  amount: number | string;
  id: number;
  name: string;
  budget_id: number;
  category_links: Array<BudgetCategoryLinkCreate>;
};

export type BudgetEntryOut = {
  amount: string;
  id: number;
  name: string;
  budget_id: number;
  user_id: number;
  category_links: Array<BudgetCategoryLinkOut>;
};

export type BudgetEntryStatus = {
  amount: string;
  id: number;
  name: string;
  budget_id: number;
  category_links_status: {
    [key: string]: BudgetCategoryLinkStatus;
  };
  total: string;
};

export type BudgetStatus = {
  user_id: number;
  name: string;
  active?: boolean;
  budget_id: number;
  entry_status: Array<BudgetEntryStatus>;
  entries: Array<BudgetEntryOut>;
  months_with_entries: Array<string>;
};

export type CategoryBase = {
  name: string;
  source_id: number;
  archived?: boolean;
};

export type CategoryOut = {
  name: string;
  source_id: number;
  archived?: boolean;
  id: number;
  stylized_name: string;
};

export type CheckoutSession = {
  checkout_url: string;
};

export type DefaultValue = {
  value: SelectOption | Array<SelectOption> | number | boolean | null;
};

/**
 * Request to disable 2FA.
 */
export type Disable2FARequest = {
  password: string;
  temp_token: string;
};

export type DisplayInfo = {
  views: Array<string>;
  size?: DisplaySize | null;
  row: number;
  col: number;
  row_span: number;
  col_span: number;
};

export type DisplaySize = "small" | "medium" | "large";

export type EffectConditionals = "amount_over" | "count_of_transactions";

export type EffectConfig = {
  frequency_days: number;
  template: string;
  subject: string;
};

/**
 * Schema for creating a new notification effect
 */
export type EffectCreate = {
  name: string;
  effect_type: EffectType;
  event_type: EventType;
  frequency_days: number;
  template: string;
  subject: string;
  condition: EffectConditionals;
  conditional_parameters: {
    [key: string]: number;
  };
};

export type EffectOut = {
  id?: number | null;
  name: string;
  effect_type: EffectType;
  event_type: EventType;
  config: EffectConfig;
  condition: EffectConditionals;
  conditional_parameters: {
    [key: string]: number;
  };
};

export type EffectType = "email" | "in_app";

/**
 * Schema for updating an existing notification effect
 */
export type EffectUpdate = {
  name?: string | null;
  effect_type?: EffectType | null;
  event_type?: EventType | null;
  frequency_days?: number | null;
  template?: string | null;
  subject?: string | null;
  condition?: EffectConditionals | null;
  conditional_parameters?: {
    [key: string]: number;
  } | null;
};

export type Email = {
  subject: string;
  html: string;
};

/**
 * Request to start the 2FA setup process.
 */
export type Enable2FARequest = {
  temp_token: string;
};

/**
 * Response containing the TOTP secret and QR code.
 */
export type Enable2FAResponse = {
  secret: string;
  qr_code: string;
};

export type EventType = "new_transaction" | "new_account_linked";

export type FilterData_Input = {
  lookup?: {
    [key: string]: FilterEntries;
  };
};

export type FilterData_Output = {
  lookup?: {
    [key: string]: FilterEntries;
  };
};

export type FilterEntries = {
  specifics?: Array<FilterEntry> | null;
  visible?: boolean | null;
  index: number;
};

export type FilterEntry = {
  value: string;
};

export type GroupByOption =
  | "account"
  | "category"
  | "month"
  | "year"
  | "budget";

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type JobStatus = "completed" | "pending" | "processing" | "failed";

export type LandingStatus =
  | "has_transactions"
  | "no_transactions_not_processing"
  | "no_transactions_processing";

export type LoginGoogleData = {
  url: string;
};

export type Message = {
  message: string;
};

export type NewPassword = {
  token: Token;
  new_password: string;
};

export type NoCodeCanvasOut = {
  name: string;
  widgets: Array<NoCodeWidgetIn_Output>;
  parameters: Array<Parameter_Output>;
  parameter_groups: Array<ParameterGroupOut>;
};

export type NoCodeParameterUpdate = {
  label: string;
  row: number;
  col: number;
  row_span: number;
  col_span: number;
};

export type NoCodeToolIn_Input = {
  tool: string;
  parameters?: Array<Parameter_Input> | null;
};

export type NoCodeToolIn_Output = {
  tool: string;
  parameters?: Array<Parameter_Output> | null;
};

export type NoCodeToolOut = {
  name: string;
  description: string;
  tool: string;
  parameters?: Array<Parameter_Output> | null;
  return_type: {
    [key: string]: unknown;
  };
  input_type: {
    [key: string]: unknown;
  };
};

export type NoCodeWidgetIn_Input = {
  id: number;
  name: string;
  description: string;
  pipeline: Array<NoCodeToolIn_Input>;
  row: number;
  col: number;
  row_span: number;
  col_span: number;
  type: WidgetType;
};

export type NoCodeWidgetIn_Output = {
  id: number;
  name: string;
  description: string;
  pipeline: Array<NoCodeToolIn_Output>;
  row: number;
  col: number;
  row_span: number;
  col_span: number;
  type: WidgetType;
};

export type NoCodeWidgetOut = {
  id: number;
  name: string;
  description: string;
  result: unknown;
  result_type: ResultTypeEnum;
  parameters: Array<Parameter_Output>;
  row: number;
  col: number;
  row_span: number;
  col_span: number;
  type: WidgetType;
};

export type NoCodeWidgetUpdate = {
  name: string;
  row: number;
  col: number;
  row_span: number;
  col_span: number;
};

export type OrderableBase_Input = {
  id?: number | null;
  name: string;
  price: number | string;
  variantGroups: Array<VariantGroupBase_Input>;
};

export type OrderableBase_Output = {
  id?: number | null;
  name: string;
  price: string;
  variantGroups: Array<VariantGroupBase_Output>;
};

export type OrderBase_Input = {
  id: string;
  timestamp: string;
  orderItems: Array<OrderItemBase_Input>;
};

export type OrderBase_Output = {
  id: string;
  timestamp: string;
  orderItems: Array<OrderItemBase_Output>;
};

export type OrderItemBase_Input = {
  orderable: OrderableBase_Input;
  variants: Array<SelectedVariantBase_Input>;
  quantity: number;
};

export type OrderItemBase_Output = {
  orderable: OrderableBase_Output;
  variants: Array<SelectedVariantBase_Output>;
  quantity: number;
};

export type PageVariant = "account-page";

export type Parameter_Input = {
  id: number;
  group_id: number;
  name: string;
  label?: string | null;
  type: ParameterType;
  value?:
    | number
    | string
    | SelectOption
    | boolean
    | Array<string>
    | Array<number | string>
    | Array<SelectOption>
    | null;
  default_value?: DefaultValue | null;
  options?: Array<SelectOption> | null;
  option_generator?: string | null;
  trigger_refetch?: boolean;
  dependent_widgets?: Array<number>;
  display_info?: DisplayInfo | null;
};

export type Parameter_Output = {
  id: number;
  group_id: number;
  name: string;
  label?: string | null;
  type: ParameterType;
  value?:
    | number
    | string
    | SelectOption
    | boolean
    | Array<string>
    | Array<SelectOption>
    | null;
  default_value?: DefaultValue | null;
  options?: Array<SelectOption> | null;
  option_generator?: string | null;
  trigger_refetch?: boolean;
  dependent_widgets?: Array<number>;
  display_info?: DisplayInfo | null;
};

export type ParameterGroupOut = {
  id: number;
  type: ParameterGroupType;
  name: string;
  widget_id?: string | null;
};

export type ParameterGroupType = "global" | "widget";

export type ParameterType =
  | "int"
  | "float"
  | "string"
  | "select"
  | "submit"
  | "datetime"
  | "pagination"
  | "multi_select";

/**
 * Response model for a Plaid account.
 */
export type PlaidAccountResponse = {
  plaid_account_id: string;
  name: string;
  mask?: string | null;
  type: string;
  subtype?: string | null;
  current_balance?: number | null;
  id: number;
  created_at: string;
};

/**
 * Request model for exchanging a public token.
 */
export type PlaidExchangeTokenRequest = {
  public_token: string;
};

/**
 * Response model for a link token.
 */
export type PlaidLinkTokenResponse = {
  link_token: string;
};

export type PlaidSyncLogOut = {
  id: number;
  sync_type: string;
  start_date?: string | null;
  end_date?: string | null;
  added_count?: number | null;
  modified_count?: number | null;
  removed_count?: number | null;
  error_message?: string | null;
  created_at: string;
};

export type PossibleSankeyInput = {
  category_id: number;
  source_id: number;
  source_name: string;
  category_name: string;
  siblings: Array<SankeySibling>;
};

export type PossibleSankeyLinkage = {
  category_id: number;
  category_name: string;
  target_source_id: number;
  target_source_name: string;
};

export type PriceDetails = {
  id: number;
  name: string;
  description?: string | null;
  price: number;
  currency: string;
  interval: string;
  tier: SubscriptionTier;
  max_sources: number;
};

export type ProcessFileJobOut = {
  created_at: string;
  last_tried_at?: string | null;
  status: JobStatus;
  user_id: number;
  config_id?: number | null;
  pdf_id: number;
  archived?: boolean;
  attempt_count?: number;
  id: number;
};

export type ProcessingState =
  | "waiting"
  | "preparing"
  | "fetching"
  | "parsing"
  | "categorizing"
  | "failed"
  | "completed";

export type ResultTypeEnum =
  | "string"
  | "number"
  | "object"
  | "list"
  | "deferred";

export type SankeyConfigCreatePayload = {
  inputs: Array<SankeyInputCreate>;
  links: Array<SankeyLinkageCreate>;
};

export type SankeyConfigInfo = {
  possible_inputs: Array<PossibleSankeyInput>;
  possible_links: Array<PossibleSankeyLinkage>;
  existing_inputs: Array<PossibleSankeyInput>;
  existing_links: Array<PossibleSankeyLinkage>;
};

export type SankeyData = {
  nodes: Array<SankeyNode>;
  links: Array<SankeyLink>;
};

export type SankeyInputCreate = {
  category_id: number;
};

export type SankeyLink = {
  source: number;
  target: number;
  value: number;
};

export type SankeyLinkageCreate = {
  category_id: number;
  target_source_id: number;
};

export type SankeyNode = {
  id: number;
  name: string;
};

export type SankeySibling = {
  category_id: number;
  category_name: string;
  source_id: number;
};

export type SavedFilterCreate = {
  name: string;
  description?: string | null;
  filter_data: FilterData_Input;
};

export type SavedFilterOut = {
  name: string;
  description?: string | null;
  filter_data: FilterData_Output;
  id: number | string;
  is_deleteable?: boolean;
  is_default?: boolean;
};

export type SavedFilterUpdate = {
  name?: string | null;
  description?: string | null;
  filter_data?: FilterData_Input | null;
};

export type SelectedVariantBase_Input = {
  groupId: string;
  id: string;
  name: string;
  priceDelta: number | string;
};

export type SelectedVariantBase_Output = {
  groupId: string;
  id: string;
  name: string;
  priceDelta: string;
};

export type SelectOption = {
  key: string;
  value: string;
};

export type SourceKind = "account" | "investment" | "card";

export type SubscriptionDetails = {
  tier: SubscriptionTier;
  status: SubscriptionStatus;
  current_period_end?: string | null;
  cancel_at_period_end?: boolean;
  max_sources: number;
  current_sources: number;
};

export type SubscriptionLimits = {
  has_reached_limit: boolean;
  current_count: number;
  max_allowed: number;
};

export type SubscriptionStatus =
  | "active"
  | "canceled"
  | "incomplete"
  | "incomplete_expired"
  | "past_due"
  | "trialing"
  | "unpaid";

export type SubscriptionTier = "free" | "premium" | "business";

export type Token = {
  access_token?: string | null;
  token_type?: string;
  requires_2fa?: boolean;
  requires_2fa_setup?: boolean;
  temp_token?: string | null;
};

export type TransactionEdit = {
  description: string;
  category_id: number;
  date_of_transaction: string;
  amount: number;
  transaction_source_id: number;
  kind: TransactionKind;
  uploaded_pdf_id?: number | null;
  archived?: boolean;
  id: number;
};

export type TransactionKind = "withdrawal" | "deposit";

export type TransactionOut = {
  description: string;
  category_id: number;
  date_of_transaction: string;
  amount: number;
  transaction_source_id: number;
  kind: TransactionKind;
  uploaded_pdf_id?: number | null;
  archived?: boolean;
  id: number;
};

export type TransactionSourceBase = {
  name: string;
  archived?: boolean;
  source_kind?: SourceKind;
};

export type TransactionSourceOut = {
  name: string;
  archived?: boolean;
  source_kind?: SourceKind;
  id: number;
  is_plaid_connected?: boolean;
};

/**
 * Request to complete login with 2FA.
 */
export type TwoFactorLoginRequest = {
  code: string;
  temp_token: string;
};

/**
 * Request to reject 2FA setup during login.
 */
export type TwoFactorRejectRequest = {
  temp_token: string;
};

export type UploadedPdfOut = {
  filename: string;
  nickname?: string | null;
  raw_content: string;
  raw_content_hash: string;
  upload_time: string;
  user_id: number;
  archived?: boolean;
  id: number;
  job?: ProcessFileJobOut | null;
  transaction_source_id?: number | null;
};

export type UserNewPassword = {
  new_password: string;
  old_password: string;
};

export type UserOut = {
  full_name: string;
  email: string;
  is_active?: boolean;
  is_superuser?: boolean;
  id: number;
  created_at?: string | null;
  updated_at?: string | null;
  settings: UserSettings;
};

export type UserRegister = {
  email: string;
  password: string;
  full_name: string;
  is_superuser?: boolean;
  is_active?: boolean;
};

export type UserSettings = {
  has_budget?: boolean;
  power_user_filters?: boolean;
};

export type UsersPublic = {
  data: Array<UserOut>;
  count: number;
};

export type UserUpdateMe = {
  email: string;
  settings?: UserSettings | null;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type VariantBase_Input = {
  id: number;
  name: string;
  priceDelta: number | string;
};

export type VariantBase_Output = {
  id: number;
  name: string;
  priceDelta: string;
};

export type VariantGroupBase_Input = {
  id: number;
  name: string;
  required: boolean;
  order_of_appearance: number;
  variants: Array<VariantBase_Input>;
};

export type VariantGroupBase_Output = {
  id: number;
  name: string;
  required: boolean;
  order_of_appearance: number;
  variants: Array<VariantBase_Output>;
};

/**
 * Request to verify a 2FA code.
 */
export type Verify2FARequest = {
  code: string;
  temp_token: string;
};

/**
 * Response after verifying a 2FA code.
 */
export type Verify2FAResponse = {
  success: boolean;
  access_token: string;
  token_type: string;
};

export type WidgetType =
  | "value"
  | "value_with_trend"
  | "badge"
  | "list"
  | "pie_chart"
  | "bar_chart"
  | "separator"
  | "form";

export type WorkerStatusOut = {
  id: number;
  batch_id: string;
  status: ProcessingState;
  created_at: string;
  updated_at: string;
  additional_info: string;
};

export type AccountsGetTransactionSourcesResponse = Array<TransactionSourceOut>;

export type AccountsCreateTransactionSourceData = {
  requestBody: TransactionSourceBase;
};

export type AccountsCreateTransactionSourceResponse = TransactionSourceOut;

export type AccountsUpdateTransactionSourceData = {
  requestBody: TransactionSourceBase;
  sourceId: number;
};

export type AccountsUpdateTransactionSourceResponse = TransactionSourceOut;

export type AccountsDeleteTransactionSourceData = {
  sourceId: number;
};

export type AccountsDeleteTransactionSourceResponse = unknown;

export type AccountsGetCategoriesData = {
  sourceId: number;
};

export type AccountsGetCategoriesResponse = Array<CategoryOut>;

export type AccountsCreateCategoryData = {
  requestBody: CategoryBase;
  sourceId: number;
};

export type AccountsCreateCategoryResponse = CategoryOut;

export type AccountsUpdateCategoryData = {
  categoryId: number;
  requestBody: CategoryBase;
};

export type AccountsUpdateCategoryResponse = CategoryOut;

export type AccountsDeleteCategoryData = {
  categoryId: number;
};

export type AccountsDeleteCategoryResponse = unknown;

export type AccountsMergeAccountsData = {
  toKeepId: number;
  toMergeId: number;
};

export type AccountsMergeAccountsResponse = unknown;

export type AccountsTriggerRecategorizationData = {
  sourceId: number;
};

export type AccountsTriggerRecategorizationResponse = {
  [key: string]: unknown;
};

export type AccountsToggleArchiveTransactionSourceData = {
  sourceId: number;
};

export type AccountsToggleArchiveTransactionSourceResponse =
  TransactionSourceOut;

export type AccountsGetAccountSyncLogsData = {
  limit?: number;
  sourceId: number;
};

export type AccountsGetAccountSyncLogsResponse = Array<PlaidSyncLogOut>;

export type AdminReseedAccountPageData = {
  userId: number;
};

export type AdminReseedAccountPageResponse = {
  [key: string]: string;
};

export type BudgetsGetBudgetEntriesData = {
  budgetId: number;
};

export type BudgetsGetBudgetEntriesResponse = Array<BudgetEntryOut>;

export type BudgetsCreateBudgetEntryData = {
  budgetId: number;
  requestBody: BudgetEntryCreate;
};

export type BudgetsCreateBudgetEntryResponse = BudgetEntryOut;

export type BudgetsUpdateBudgetEntryData = {
  entryId: number;
  requestBody: BudgetEntryEdit;
};

export type BudgetsUpdateBudgetEntryResponse = BudgetEntryOut;

export type BudgetsDeleteBudgetEntryData = {
  entryId: number;
};

export type BudgetsDeleteBudgetEntryResponse = unknown;

export type BudgetsGetBudgetCategoriesData = {
  budgetEntryId: number;
};

export type BudgetsGetBudgetCategoriesResponse = Array<BudgetCategoryLinkOut>;

export type BudgetsCreateBudgetCategoryData = {
  budgetEntryId: number;
  requestBody: BudgetCategoryLinkBase;
};

export type BudgetsCreateBudgetCategoryResponse = BudgetCategoryLinkOut;

export type BudgetsUpdateBudgetCategoryData = {
  categoryLinkId: number;
  requestBody: BudgetCategoryLinkBase;
};

export type BudgetsUpdateBudgetCategoryResponse = BudgetCategoryLinkOut;

export type BudgetsDeleteBudgetCategoryData = {
  categoryLinkId: number;
};

export type BudgetsDeleteBudgetCategoryResponse = unknown;

export type BudgetsGetBudgetStatusResponse = BudgetStatus;

export type DemoGetDemoAggregatedTransactionsData = {
  requestBody?: FilterData_Input | null;
};

export type DemoGetDemoAggregatedTransactionsResponse = AggregatedTransactions;

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = Token;

export type LoginLogoutResponse = unknown;

export type LoginTestTokenResponse = UserOut;

export type LoginRecoverPasswordData = {
  email: string;
};

export type LoginRecoverPasswordResponse = Message;

export type LoginResetPasswordData = {
  requestBody: NewPassword;
};

export type LoginResetPasswordResponse = Message;

export type LoginRecoverPasswordHtmlContentData = {
  email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = string;

export type NoCodeGetEffectsResponse = Array<EffectOut>;

export type NoCodeCreateEffectData = {
  requestBody: EffectCreate;
};

export type NoCodeCreateEffectResponse = EffectOut;

export type NoCodePreviewNotificationData = {
  accountName?: string;
  effectType?: EffectType;
  eventType?: EventType;
  numTransactions?: number;
  subject?: string | null;
  template?: string | null;
};

export type NoCodePreviewNotificationResponse = Email;

export type NoCodeUpdateEffectData = {
  effectId: number;
  requestBody: EffectUpdate;
};

export type NoCodeUpdateEffectResponse = EffectOut;

export type NoCodeDeleteEffectData = {
  effectId: number;
};

export type NoCodeDeleteEffectResponse = void;

export type NoCodeGetNoCodeToolResponse = Array<NoCodeToolOut>;

export type NoCodeSaveNoCodeToolData = {
  requestBody: Array<NoCodeWidgetIn_Input>;
};

export type NoCodeSaveNoCodeToolResponse = Array<NoCodeWidgetOut>;

export type NoCodeRefetchWidgetData = {
  requestBody?: Array<Parameter_Input> | null;
  widgetId: number;
};

export type NoCodeRefetchWidgetResponse = NoCodeWidgetOut;

export type NoCodeUpdateParameterData = {
  parameterId: number;
  requestBody: NoCodeParameterUpdate;
};

export type NoCodeUpdateParameterResponse = {
  [key: string]: string;
};

export type NoCodeUpdateWidgetData = {
  requestBody: NoCodeWidgetUpdate;
  widgetId: number;
};

export type NoCodeUpdateWidgetResponse = {
  [key: string]: string;
};

export type NoCodeGetNoCodeDashboardData = {
  variant: PageVariant;
};

export type NoCodeGetNoCodeDashboardResponse = NoCodeCanvasOut;

export type OauthLoginGoogleResponse = LoginGoogleData;

export type OauthGoogleCallbackData = {
  code: string;
  error?: string | null;
};

export type OauthGoogleCallbackResponse = unknown;

export type PlaidGetLinkTokenResponse = PlaidLinkTokenResponse;

export type PlaidExchangeTokenData = {
  requestBody: PlaidExchangeTokenRequest;
};

export type PlaidExchangeTokenResponse = Array<PlaidAccountResponse>;

export type PlaidGetPlaidAccountsResponse = Array<PlaidAccountResponse>;

export type PosGetMenuResponse = Array<OrderableBase_Output>;

export type PosCreateMenuItemData = {
  requestBody: OrderableBase_Input;
};

export type PosCreateMenuItemResponse = OrderableBase_Output;

export type PosUpdateMenuItemData = {
  orderableId: number;
  requestBody: OrderableBase_Input;
};

export type PosUpdateMenuItemResponse = OrderableBase_Output;

export type PosDeleteMenuItemData = {
  orderableId: number;
};

export type PosDeleteMenuItemResponse = {
  [key: string]: string;
};

export type PosGetOrdersResponse = Array<OrderBase_Output>;

export type PosCreateOrderData = {
  requestBody: OrderBase_Input;
};

export type PosCreateOrderResponse = OrderBase_Output;

export type SankeyGetSankeyDataResponse = SankeyData;

export type SankeyCreateSankeyConfigData = {
  requestBody: SankeyConfigCreatePayload;
};

export type SankeyCreateSankeyConfigResponse = {
  [key: string]: boolean;
};

export type SankeyGetSankeyConfigInfoResponse = SankeyConfigInfo;

export type SavedFiltersCreateSavedFilterData = {
  requestBody: SavedFilterCreate;
};

export type SavedFiltersCreateSavedFilterResponse = SavedFilterOut;

export type SavedFiltersReadSavedFiltersData = {
  limit?: number;
  skip?: number;
};

export type SavedFiltersReadSavedFiltersResponse = Array<SavedFilterOut>;

export type SavedFiltersReadSavedFilterData = {
  filterId: number | string;
};

export type SavedFiltersReadSavedFilterResponse = SavedFilterOut;

export type SavedFiltersUpdateSavedFilterData = {
  filterId: number;
  requestBody: SavedFilterUpdate;
};

export type SavedFiltersUpdateSavedFilterResponse = SavedFilterOut;

export type SavedFiltersDeleteSavedFilterData = {
  filterId: number;
};

export type SavedFiltersDeleteSavedFilterResponse = unknown;

export type SavedFiltersReadSavedFilterByNameData = {
  filterName: string;
};

export type SavedFiltersReadSavedFilterByNameResponse = SavedFilterOut;

export type SitemapSitemapResponse = unknown;

export type SubscriptionGetSubscriptionStatusResponse = SubscriptionDetails;

export type SubscriptionCheckSubscriptionLimitsResponse = SubscriptionLimits;

export type SubscriptionGetSubscriptionPlansResponse = Array<PriceDetails>;

export type SubscriptionCreateCheckoutSessionData = {
  priceId: number;
};

export type SubscriptionCreateCheckoutSessionResponse = CheckoutSession;

export type SubscriptionCancelSubscriptionResponse = Message;

export type SubscriptionStripeWebhookData = {
  stripeSignature?: string;
};

export type SubscriptionStripeWebhookResponse = {
  [key: string]: string;
};

export type SubscriptionSyncPricesResponse = Message;

export type TransactionsGetTransactionsResponse = Array<TransactionOut>;

export type TransactionsGetAggregatedTransactionsData = {
  requestBody?: FilterData_Input | null;
};

export type TransactionsGetAggregatedTransactionsResponse =
  AggregatedTransactions;

export type TransactionsUpdateTransactionData = {
  requestBody: TransactionEdit;
};

export type TransactionsUpdateTransactionResponse = TransactionOut;

export type TransactionsDeleteTransactionData = {
  transactionId: number;
};

export type TransactionsDeleteTransactionResponse = {
  [key: string]: string;
};

export type TransactionsListCategoriesData = {
  transactionId: number;
};

export type TransactionsListCategoriesResponse = Array<CategoryOut>;

export type TransactionsListAllCategoriesResponse = Array<CategoryOut>;

export type TransactionsGetLandingStatusResponse = LandingStatus;

export type TwoFactorEnable2FaData = {
  requestBody: Enable2FARequest;
};

export type TwoFactorEnable2FaResponse = Enable2FAResponse;

export type TwoFactorVerify2FaData = {
  requestBody: Verify2FARequest;
};

export type TwoFactorVerify2FaResponse = Verify2FAResponse;

export type TwoFactorVerify2FaLoginData = {
  requestBody: TwoFactorLoginRequest;
};

export type TwoFactorVerify2FaLoginResponse = Token;

export type TwoFactorReject2FaData = {
  requestBody: TwoFactorRejectRequest;
};

export type TwoFactorReject2FaResponse = Token;

export type TwoFactorDisable2FaData = {
  requestBody: Disable2FARequest;
};

export type TwoFactorDisable2FaResponse = Verify2FAResponse;

export type UploadsReprocessFileData = {
  jobId: number;
};

export type UploadsReprocessFileResponse = ProcessFileJobOut;

export type UploadsGetUploadsResponse = Array<UploadedPdfOut>;

export type UploadsUploadFilesData = {
  formData: Body_uploads_upload_files;
};

export type UploadsUploadFilesResponse = Array<UploadedPdfOut>;

export type UploadsIsUploadingResponse = boolean;

export type UploadsDeleteFileData = {
  fileId: number;
};

export type UploadsDeleteFileResponse = unknown;

export type UsersReadUsersData = {
  limit?: number;
  skip?: number;
};

export type UsersReadUsersResponse = UsersPublic;

export type UsersCreateUserData = {
  requestBody: UserRegister;
};

export type UsersCreateUserResponse = UserOut;

export type UsersReadUserMeResponse = UserOut;

export type UsersDeleteUserMeResponse = Message;

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = UserOut;

export type UsersUpdatePasswordMeData = {
  requestBody: UserNewPassword;
};

export type UsersUpdatePasswordMeResponse = Message;

export type UsersReadUserMeOptionalResponse = UserOut | null;

export type UsersRegisterUserData = {
  requestBody: UserRegister;
};

export type UsersRegisterUserResponse = UserOut;

export type UsersReadUserByIdData = {
  userId: string;
};

export type UsersReadUserByIdResponse = UserOut;

export type UtilsTestEmailData = {
  emailTo: string;
};

export type UtilsTestEmailResponse = Message;

export type UtilsHealthCheckResponse = boolean;

export type WorkerStatusGetStatusResponse = Array<WorkerStatusOut>;
