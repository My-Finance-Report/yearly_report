"""Refactored models to pure SQLAlchemy

Revision ID: 43f108ae2dee
Revises: 
Create Date: 2025-02-12 07:21:45.635044

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "43f108ae2dee"
down_revision = None
branch_labels = None
depends_on = None

job_status_enum = postgresql.ENUM(
    "completed", "pending", "processing", "failed", name="jobstatus", create_type=True
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("deprecated_processed_file")
    op.drop_table("job")

    job_status_enum.create(op.get_bind(), checkfirst=True)

    op.alter_column(
        "category",
        "id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "category",
        "name",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=False,
    )
    op.alter_column(
        "category",
        "source_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.alter_column(
        "category",
        "user_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.drop_constraint("unique_category", "category", type_="unique")
    op.create_unique_constraint("uq_category", "category", ["name", "source_id"])
    op.drop_constraint("category_source_id_fkey", "category", type_="foreignkey")
    op.drop_constraint("category_user_id_fkey", "category", type_="foreignkey")
    op.create_foreign_key(None, "category", "user", ["user_id"], ["id"])
    op.create_foreign_key(None, "category", "transaction_source", ["source_id"], ["id"])
    op.alter_column(
        "col_chart_config",
        "id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "col_chart_config",
        "name",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=False,
    )
    op.alter_column(
        "col_chart_config",
        "user_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.drop_constraint("unique_active_col_chart", "col_chart_config", type_="unique")
    op.create_unique_constraint(
        "uq_col_chart_config", "col_chart_config", ["user_id", "active"]
    )
    op.drop_constraint(
        "col_chart_config_user_id_fkey", "col_chart_config", type_="foreignkey"
    )
    op.create_foreign_key(None, "col_chart_config", "user", ["user_id"], ["id"])
    op.alter_column(
        "process_file_job",
        "id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "process_file_job",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=False,
    )
    op.alter_column(
        "process_file_job",
        "last_tried_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=True,
    )
    op.alter_column(
        "process_file_job",
        "user_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.alter_column(
        "process_file_job",
        "config_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=True,
    )
    op.alter_column(
        "process_file_job",
        "pdf_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.alter_column(
        "process_file_job",
        "attempt_count",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
        existing_server_default=sa.text("0"),
    )
    op.drop_constraint("unique_pdf_job", "process_file_job", type_="unique")
    op.create_unique_constraint("uq_process_file_job", "process_file_job", ["pdf_id"])
    op.drop_constraint(
        "process_file_job_user_id_fkey", "process_file_job", type_="foreignkey"
    )
    op.drop_constraint(
        "process_file_job_config_id_fkey", "process_file_job", type_="foreignkey"
    )
    op.drop_constraint(
        "process_file_job_pdf_id_fkey", "process_file_job", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "process_file_job", "upload_configuration", ["config_id"], ["id"]
    )
    op.create_foreign_key(None, "process_file_job", "user", ["user_id"], ["id"])
    op.create_foreign_key(None, "process_file_job", "uploaded_pdf", ["pdf_id"], ["id"])
    op.alter_column(
        "sankey_config",
        "id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "sankey_config",
        "name",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=False,
    )
    op.alter_column(
        "sankey_config",
        "user_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.drop_constraint(
        "sankey_config_user_id_fkey", "sankey_config", type_="foreignkey"
    )
    op.create_foreign_key(None, "sankey_config", "user", ["user_id"], ["id"])
    op.alter_column(
        "transaction",
        "id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "transaction",
        "description",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction",
        "category_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction",
        "date_of_transaction",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction",
        "amount",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction",
        "transaction_source_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction",
        "uploaded_pdf_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=True,
    )
    op.alter_column(
        "transaction",
        "user_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.drop_constraint(
        "transaction_uploaded_pdf_id_fkey", "transaction", type_="foreignkey"
    )
    op.drop_constraint("transaction_user_id_fkey", "transaction", type_="foreignkey")
    op.drop_constraint(
        "transaction_transaction_source_id_fkey", "transaction", type_="foreignkey"
    )
    op.drop_constraint(
        "transaction_category_id_fkey", "transaction", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "transaction", "uploaded_pdf", ["uploaded_pdf_id"], ["id"]
    )
    op.create_foreign_key(
        None, "transaction", "transaction_source", ["transaction_source_id"], ["id"]
    )
    op.create_foreign_key(None, "transaction", "category", ["category_id"], ["id"])
    op.create_foreign_key(None, "transaction", "user", ["user_id"], ["id"])
    op.alter_column(
        "transaction_source",
        "id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "transaction_source",
        "name",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction_source",
        "user_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )

    op.drop_constraint(
        "unique_transaction_source", "transaction_source", type_="unique"
    )
    op.create_unique_constraint(
        "uq_transaction_source", "transaction_source", ["user_id", "name"]
    )
    op.drop_constraint(
        "transaction_source_user_id_fkey", "transaction_source", type_="foreignkey"
    )
    op.create_foreign_key(None, "transaction_source", "user", ["user_id"], ["id"])
    op.alter_column(
        "upload_configuration",
        "id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('upload_configuration_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "upload_configuration",
        "filename_regex",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=True,
    )
    op.alter_column(
        "upload_configuration",
        "start_keyword",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=True,
    )
    op.alter_column(
        "upload_configuration",
        "end_keyword",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=True,
    )
    op.alter_column(
        "upload_configuration",
        "transaction_source_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.alter_column(
        "upload_configuration",
        "user_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.drop_constraint(
        "unique_upload_configuration", "upload_configuration", type_="unique"
    )
    op.create_unique_constraint(
        "uq_upload_configuration", "upload_configuration", ["transaction_source_id"]
    )
    op.drop_constraint(
        "upload_configuration_user_id_fkey", "upload_configuration", type_="foreignkey"
    )
    op.drop_constraint(
        "upload_configuration_transaction_source_id_fkey",
        "upload_configuration",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "upload_configuration",
        "transaction_source",
        ["transaction_source_id"],
        ["id"],
    )
    op.create_foreign_key(None, "upload_configuration", "user", ["user_id"], ["id"])
    op.alter_column(
        "uploaded_pdf",
        "id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('uploaded_pdf_id_seq'::regclass)"),
    )
    op.alter_column(
        "uploaded_pdf",
        "filename",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=False,
    )
    op.alter_column(
        "uploaded_pdf",
        "raw_content",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=False,
    )
    op.alter_column(
        "uploaded_pdf",
        "raw_content_hash",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=False,
    )

    op.alter_column(
        "uploaded_pdf",
        "user_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.drop_constraint("unique_user_content", "uploaded_pdf", type_="unique")
    op.create_unique_constraint(
        "uq_uploaded_pdf", "uploaded_pdf", ["raw_content_hash", "user_id"]
    )
    op.drop_constraint("uploaded_pdf_user_id_fkey", "uploaded_pdf", type_="foreignkey")
    op.create_foreign_key(None, "uploaded_pdf", "user", ["user_id"], ["id"])
    op.add_column("user", sa.Column("hashed_password", sa.String(), nullable=True))
    op.add_column("user", sa.Column("full_name", sa.String(), nullable=True))
    op.add_column("user", sa.Column("is_active", sa.Boolean(), nullable=True))
    op.add_column("user", sa.Column("is_superuser", sa.Boolean(), nullable=True))
    op.alter_column(
        "user",
        "id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('user_id_seq'::regclass)"),
    )
    op.alter_column(
        "user",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "onboarding_step",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=True,
    )
    op.drop_column("user", "password_hash")
    op.alter_column(
        "user_session",
        "id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "user_session",
        "user_id",
        existing_type=sa.BIGINT(),
        type_=sa.Integer(),
        existing_nullable=False,
    )
    op.alter_column(
        "user_session",
        "session_token",
        existing_type=sa.VARCHAR(),
        type_=sa.Text(),
        existing_nullable=False,
    )
    op.alter_column(
        "user_session",
        "expires_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=False,
    )
    op.drop_constraint("user_session_user_id_fkey", "user_session", type_="foreignkey")
    op.create_foreign_key(None, "user_session", "user", ["user_id"], ["id"])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "user_session", type_="foreignkey")
    op.create_foreign_key(
        "user_session_user_id_fkey",
        "user_session",
        "user",
        ["user_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.alter_column(
        "user_session",
        "expires_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "user_session",
        "session_token",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.alter_column(
        "user_session",
        "user_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "user_session",
        "id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.add_column(
        "user",
        sa.Column("password_hash", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.alter_column(
        "user",
        "onboarding_step",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=True,
    )
    op.alter_column(
        "user",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('user_id_seq'::regclass)"),
    )
    op.drop_column("user", "is_superuser")
    op.drop_column("user", "is_active")
    op.drop_column("user", "full_name")
    op.drop_column("user", "hashed_password")
    op.drop_constraint(None, "uploaded_pdf", type_="foreignkey")
    op.create_foreign_key(
        "uploaded_pdf_user_id_fkey",
        "uploaded_pdf",
        "user",
        ["user_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.drop_constraint("uq_uploaded_pdf", "uploaded_pdf", type_="unique")
    op.create_unique_constraint(
        "unique_user_content", "uploaded_pdf", ["raw_content_hash", "user_id"]
    )
    op.alter_column(
        "uploaded_pdf",
        "user_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "uploaded_pdf",
        "upload_time",
        existing_type=sa.DateTime(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.alter_column(
        "uploaded_pdf",
        "raw_content_hash",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.alter_column(
        "uploaded_pdf",
        "raw_content",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.alter_column(
        "uploaded_pdf",
        "filename",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.alter_column(
        "uploaded_pdf",
        "id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('uploaded_pdf_id_seq'::regclass)"),
    )
    op.drop_constraint(None, "upload_configuration", type_="foreignkey")
    op.drop_constraint(None, "upload_configuration", type_="foreignkey")
    op.create_foreign_key(
        "upload_configuration_transaction_source_id_fkey",
        "upload_configuration",
        "transaction_source",
        ["transaction_source_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "upload_configuration_user_id_fkey",
        "upload_configuration",
        "user",
        ["user_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.drop_constraint(
        "uq_upload_configuration", "upload_configuration", type_="unique"
    )
    op.create_unique_constraint(
        "unique_upload_configuration", "upload_configuration", ["transaction_source_id"]
    )
    op.alter_column(
        "upload_configuration",
        "user_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "upload_configuration",
        "transaction_source_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "upload_configuration",
        "end_keyword",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=True,
    )
    op.alter_column(
        "upload_configuration",
        "start_keyword",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=True,
    )
    op.alter_column(
        "upload_configuration",
        "filename_regex",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=True,
    )
    op.alter_column(
        "upload_configuration",
        "id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('upload_configuration_id_seq'::regclass)"
        ),
    )
    op.drop_constraint(None, "transaction_source", type_="foreignkey")
    op.create_foreign_key(
        "transaction_source_user_id_fkey",
        "transaction_source",
        "user",
        ["user_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.drop_constraint("uq_transaction_source", "transaction_source", type_="unique")
    op.create_unique_constraint(
        "unique_transaction_source", "transaction_source", ["user_id", "name"]
    )
    op.alter_column(
        "transaction_source",
        "source_kind",
        existing_type=sa.Enum("account", "investment", "card", name="sourcekind"),
        type_=sa.VARCHAR(),
        existing_nullable=False,
        existing_server_default=sa.text("'Account'::character varying"),
    )
    op.alter_column(
        "transaction_source",
        "user_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction_source",
        "name",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction_source",
        "id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.drop_constraint(None, "transaction", type_="foreignkey")
    op.drop_constraint(None, "transaction", type_="foreignkey")
    op.drop_constraint(None, "transaction", type_="foreignkey")
    op.drop_constraint(None, "transaction", type_="foreignkey")
    op.create_foreign_key(
        "transaction_category_id_fkey",
        "transaction",
        "category",
        ["category_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "transaction_transaction_source_id_fkey",
        "transaction",
        "transaction_source",
        ["transaction_source_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "transaction_user_id_fkey",
        "transaction",
        "user",
        ["user_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "transaction_uploaded_pdf_id_fkey",
        "transaction",
        "uploaded_pdf",
        ["uploaded_pdf_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.alter_column(
        "transaction",
        "user_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction",
        "uploaded_pdf_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=True,
    )
    op.alter_column(
        "transaction",
        "kind",
        existing_type=sa.Enum("withdrawal", "deposit", name="transactionkind"),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction",
        "transaction_source_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction",
        "amount",
        existing_type=sa.Integer(),
        type_=sa.DOUBLE_PRECISION(precision=53),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction",
        "date_of_transaction",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction",
        "category_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction",
        "description",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.alter_column(
        "transaction",
        "id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.drop_constraint(None, "sankey_config", type_="foreignkey")
    op.create_foreign_key(
        "sankey_config_user_id_fkey",
        "sankey_config",
        "user",
        ["user_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.alter_column(
        "sankey_config",
        "user_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "sankey_config",
        "name",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.alter_column(
        "sankey_config",
        "id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.drop_constraint(None, "process_file_job", type_="foreignkey")
    op.drop_constraint(None, "process_file_job", type_="foreignkey")
    op.drop_constraint(None, "process_file_job", type_="foreignkey")
    op.create_foreign_key(
        "process_file_job_pdf_id_fkey",
        "process_file_job",
        "uploaded_pdf",
        ["pdf_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "process_file_job_config_id_fkey",
        "process_file_job",
        "upload_configuration",
        ["config_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "process_file_job_user_id_fkey",
        "process_file_job",
        "user",
        ["user_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.drop_constraint("uq_process_file_job", "process_file_job", type_="unique")
    op.create_unique_constraint("unique_pdf_job", "process_file_job", ["pdf_id"])
    op.alter_column(
        "process_file_job",
        "attempt_count",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
        existing_server_default=sa.text("0"),
    )
    op.alter_column(
        "process_file_job",
        "pdf_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "process_file_job",
        "config_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=True,
    )
    op.alter_column(
        "process_file_job",
        "user_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "process_file_job",
        "last_tried_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "process_file_job",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "process_file_job",
        "id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.drop_constraint(None, "col_chart_config", type_="foreignkey")
    op.create_foreign_key(
        "col_chart_config_user_id_fkey",
        "col_chart_config",
        "user",
        ["user_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.drop_constraint("uq_col_chart_config", "col_chart_config", type_="unique")
    op.create_unique_constraint(
        "unique_active_col_chart", "col_chart_config", ["user_id", "active"]
    )
    op.alter_column(
        "col_chart_config",
        "user_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "col_chart_config",
        "name",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.alter_column(
        "col_chart_config",
        "id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.drop_constraint(None, "category", type_="foreignkey")
    op.drop_constraint(None, "category", type_="foreignkey")
    op.create_foreign_key(
        "category_user_id_fkey",
        "category",
        "user",
        ["user_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "category_source_id_fkey",
        "category",
        "transaction_source",
        ["source_id"],
        ["id"],
        onupdate="RESTRICT",
        ondelete="RESTRICT",
    )
    op.drop_constraint("uq_category", "category", type_="unique")
    op.create_unique_constraint("unique_category", "category", ["name", "source_id"])
    op.alter_column(
        "category",
        "user_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "category",
        "source_id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
    )
    op.alter_column(
        "category",
        "name",
        existing_type=sa.Text(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.alter_column(
        "category",
        "id",
        existing_type=sa.Integer(),
        type_=sa.BIGINT(),
        existing_nullable=False,
        autoincrement=True,
    )
    op.create_table(
        "job",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("job_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_tried_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("job_kind", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["job_id"],
            ["job.id"],
            name="job_job_id_fkey",
            onupdate="RESTRICT",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name="job_pkey"),
    )
    op.create_table(
        "colchart_input",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("config_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("source_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["config_id"],
            ["col_chart_config.id"],
            name="colchart_input_config_id_fkey",
            onupdate="RESTRICT",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["transaction_source.id"],
            name="colchart_input_source_id_fkey",
            onupdate="RESTRICT",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name="colchart_input_pkey"),
    )
    op.create_table(
        "deprecated_processed_file",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("filename", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "upload_configuration_id", sa.BIGINT(), autoincrement=False, nullable=True
        ),
        sa.Column("uploaded_pdf_id", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            sa.VARCHAR(),
            server_default=sa.text("'Completed'::character varying"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["upload_configuration_id"],
            ["upload_configuration.id"],
            name="deprecated_processed_file_upload_configuration_id_fkey",
            onupdate="RESTRICT",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["uploaded_pdf_id"],
            ["uploaded_pdf.id"],
            name="deprecated_processed_file_uploaded_pdf_id_fkey",
            onupdate="RESTRICT",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name="deprecated_processed_file_user_id_fkey",
            onupdate="RESTRICT",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name="deprecated_processed_file_pkey"),
        sa.UniqueConstraint(
            "filename", "user_id", name="deprecated_unique_processed_file"
        ),
    )
    op.create_table(
        "sankey_linkage",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("config_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("source_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("category_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("target_source_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
            name="sankey_linkage_category_id_fkey",
            onupdate="RESTRICT",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["config_id"],
            ["sankey_config.id"],
            name="sankey_linkage_config_id_fkey",
            onupdate="RESTRICT",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["transaction_source.id"],
            name="sankey_linkage_source_id_fkey",
            onupdate="RESTRICT",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["target_source_id"],
            ["transaction_source.id"],
            name="sankey_linkage_target_source_id_fkey",
            onupdate="RESTRICT",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name="sankey_linkage_pkey"),
    )
    op.create_table(
        "sankey_input",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("config_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("source_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("category_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
            name="sankey_input_category_id_fkey",
            onupdate="RESTRICT",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["config_id"],
            ["sankey_config.id"],
            name="sankey_input_config_id_fkey",
            onupdate="RESTRICT",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["transaction_source.id"],
            name="sankey_input_source_id_fkey",
            onupdate="RESTRICT",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name="sankey_input_pkey"),
    )
    # ### end Alembic commands ###
