// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
  AccountsGetTransactionSourcesResponse,
  AccountsCreateTransactionSourceData,
  AccountsCreateTransactionSourceResponse,
  AccountsUpdateTransactionSourceData,
  AccountsUpdateTransactionSourceResponse,
  AccountsDeleteTransactionSourceData,
  AccountsDeleteTransactionSourceResponse,
  AccountsGetCategoriesData,
  AccountsGetCategoriesResponse,
  AccountsCreateCategoryData,
  AccountsCreateCategoryResponse,
  AccountsUpdateCategoryData,
  AccountsUpdateCategoryResponse,
  AccountsDeleteCategoryData,
  AccountsDeleteCategoryResponse,
  AccountsMergeAccountsData,
  AccountsMergeAccountsResponse,
  AccountsTriggerRecategorizationData,
  AccountsTriggerRecategorizationResponse,
  AccountsToggleArchiveTransactionSourceData,
  AccountsToggleArchiveTransactionSourceResponse,
  AccountsGetAccountSyncLogsData,
  AccountsGetAccountSyncLogsResponse,
  AdminReseedAccountPageData,
  AdminReseedAccountPageResponse,
  BudgetsGetBudgetEntriesData,
  BudgetsGetBudgetEntriesResponse,
  BudgetsCreateBudgetEntryData,
  BudgetsCreateBudgetEntryResponse,
  BudgetsUpdateBudgetEntryData,
  BudgetsUpdateBudgetEntryResponse,
  BudgetsDeleteBudgetEntryData,
  BudgetsDeleteBudgetEntryResponse,
  BudgetsGetBudgetCategoriesData,
  BudgetsGetBudgetCategoriesResponse,
  BudgetsCreateBudgetCategoryData,
  BudgetsCreateBudgetCategoryResponse,
  BudgetsUpdateBudgetCategoryData,
  BudgetsUpdateBudgetCategoryResponse,
  BudgetsDeleteBudgetCategoryData,
  BudgetsDeleteBudgetCategoryResponse,
  BudgetsGetBudgetStatusResponse,
  DemoGetDemoAggregatedTransactionsData,
  DemoGetDemoAggregatedTransactionsResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginLogoutResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  NoCodeGetEffectsResponse,
  NoCodeCreateEffectData,
  NoCodeCreateEffectResponse,
  NoCodePreviewNotificationData,
  NoCodePreviewNotificationResponse,
  NoCodeUpdateEffectData,
  NoCodeUpdateEffectResponse,
  NoCodeDeleteEffectData,
  NoCodeDeleteEffectResponse,
  NoCodeGetNoCodeToolResponse,
  NoCodeSaveNoCodeToolData,
  NoCodeSaveNoCodeToolResponse,
  NoCodeRefetchWidgetData,
  NoCodeRefetchWidgetResponse,
  NoCodeUpdateParameterData,
  NoCodeUpdateParameterResponse,
  NoCodeUpdateWidgetData,
  NoCodeUpdateWidgetResponse,
  NoCodeGetNoCodeDashboardData,
  NoCodeGetNoCodeDashboardResponse,
  OauthLoginGoogleResponse,
  OauthGoogleCallbackData,
  OauthGoogleCallbackResponse,
  PlaidGetLinkTokenResponse,
  PlaidExchangeTokenData,
  PlaidExchangeTokenResponse,
  PlaidGetPlaidAccountsResponse,
  PosGetMenuResponse,
  PosCreateMenuItemData,
  PosCreateMenuItemResponse,
  PosUpdateMenuItemData,
  PosUpdateMenuItemResponse,
  PosDeleteMenuItemData,
  PosDeleteMenuItemResponse,
  PosGetOrdersResponse,
  PosCreateOrderData,
  PosCreateOrderResponse,
  SankeyGetSankeyDataResponse,
  SankeyCreateSankeyConfigData,
  SankeyCreateSankeyConfigResponse,
  SankeyGetSankeyConfigInfoResponse,
  SavedFiltersCreateSavedFilterData,
  SavedFiltersCreateSavedFilterResponse,
  SavedFiltersReadSavedFiltersData,
  SavedFiltersReadSavedFiltersResponse,
  SavedFiltersReadSavedFilterData,
  SavedFiltersReadSavedFilterResponse,
  SavedFiltersUpdateSavedFilterData,
  SavedFiltersUpdateSavedFilterResponse,
  SavedFiltersDeleteSavedFilterData,
  SavedFiltersDeleteSavedFilterResponse,
  SavedFiltersReadSavedFilterByNameData,
  SavedFiltersReadSavedFilterByNameResponse,
  SitemapSitemapResponse,
  SubscriptionGetSubscriptionStatusResponse,
  SubscriptionCheckSubscriptionLimitsResponse,
  SubscriptionGetSubscriptionPlansResponse,
  SubscriptionCreateCheckoutSessionData,
  SubscriptionCreateCheckoutSessionResponse,
  SubscriptionCancelSubscriptionResponse,
  SubscriptionStripeWebhookData,
  SubscriptionStripeWebhookResponse,
  SubscriptionSyncPricesResponse,
  TransactionsGetTransactionsResponse,
  TransactionsGetAggregatedTransactionsData,
  TransactionsGetAggregatedTransactionsResponse,
  TransactionsUpdateTransactionData,
  TransactionsUpdateTransactionResponse,
  TransactionsDeleteTransactionData,
  TransactionsDeleteTransactionResponse,
  TransactionsListCategoriesData,
  TransactionsListCategoriesResponse,
  TransactionsListAllCategoriesResponse,
  TransactionsGetLandingStatusResponse,
  TwoFactorEnable2FaData,
  TwoFactorEnable2FaResponse,
  TwoFactorVerify2FaData,
  TwoFactorVerify2FaResponse,
  TwoFactorVerify2FaLoginData,
  TwoFactorVerify2FaLoginResponse,
  TwoFactorReject2FaData,
  TwoFactorReject2FaResponse,
  TwoFactorDisable2FaData,
  TwoFactorDisable2FaResponse,
  UploadsReprocessFileData,
  UploadsReprocessFileResponse,
  UploadsGetUploadsResponse,
  UploadsUploadFilesData,
  UploadsUploadFilesResponse,
  UploadsIsUploadingResponse,
  UploadsDeleteFileData,
  UploadsDeleteFileResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersReadUserMeOptionalResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
  WorkerStatusGetStatusResponse,
} from "./types.gen";

export class AccountsService {
  /**
   * Get Transaction Sources
   * @returns TransactionSourceOut Successful Response
   * @throws ApiError
   */
  public static getTransactionSources(): CancelablePromise<AccountsGetTransactionSourcesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/accounts/",
    });
  }

  /**
   * Create Transaction Source
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TransactionSourceOut Successful Response
   * @throws ApiError
   */
  public static createTransactionSource(
    data: AccountsCreateTransactionSourceData,
  ): CancelablePromise<AccountsCreateTransactionSourceResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/accounts/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Transaction Source
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.requestBody
   * @returns TransactionSourceOut Successful Response
   * @throws ApiError
   */
  public static updateTransactionSource(
    data: AccountsUpdateTransactionSourceData,
  ): CancelablePromise<AccountsUpdateTransactionSourceResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/accounts/{source_id}",
      path: {
        source_id: data.sourceId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Transaction Source
   * @param data The data for the request.
   * @param data.sourceId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteTransactionSource(
    data: AccountsDeleteTransactionSourceData,
  ): CancelablePromise<AccountsDeleteTransactionSourceResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/accounts/{source_id}",
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Categories
   * @param data The data for the request.
   * @param data.sourceId
   * @returns CategoryOut Successful Response
   * @throws ApiError
   */
  public static getCategories(
    data: AccountsGetCategoriesData,
  ): CancelablePromise<AccountsGetCategoriesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/accounts/{source_id}/categories",
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create Category
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.requestBody
   * @returns CategoryOut Successful Response
   * @throws ApiError
   */
  public static createCategory(
    data: AccountsCreateCategoryData,
  ): CancelablePromise<AccountsCreateCategoryResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/accounts/{source_id}/categories",
      path: {
        source_id: data.sourceId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Category
   * @param data The data for the request.
   * @param data.categoryId
   * @param data.requestBody
   * @returns CategoryOut Successful Response
   * @throws ApiError
   */
  public static updateCategory(
    data: AccountsUpdateCategoryData,
  ): CancelablePromise<AccountsUpdateCategoryResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/accounts/categories/{category_id}",
      path: {
        category_id: data.categoryId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Category
   * @param data The data for the request.
   * @param data.categoryId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteCategory(
    data: AccountsDeleteCategoryData,
  ): CancelablePromise<AccountsDeleteCategoryResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/accounts/categories/{category_id}",
      path: {
        category_id: data.categoryId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Merge Accounts
   * @param data The data for the request.
   * @param data.toKeepId
   * @param data.toMergeId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static mergeAccounts(
    data: AccountsMergeAccountsData,
  ): CancelablePromise<AccountsMergeAccountsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/accounts/merge-accounts",
      query: {
        to_keep_id: data.toKeepId,
        to_merge_id: data.toMergeId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Trigger Recategorization
   * Trigger recategorization for all transactions in a specific transaction source.
   * @param data The data for the request.
   * @param data.sourceId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static triggerRecategorization(
    data: AccountsTriggerRecategorizationData,
  ): CancelablePromise<AccountsTriggerRecategorizationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/accounts/{source_id}/recategorize",
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Toggle Archive Transaction Source
   * Toggle the archive status of a transaction source.
   * @param data The data for the request.
   * @param data.sourceId
   * @returns TransactionSourceOut Successful Response
   * @throws ApiError
   */
  public static toggleArchiveTransactionSource(
    data: AccountsToggleArchiveTransactionSourceData,
  ): CancelablePromise<AccountsToggleArchiveTransactionSourceResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/accounts/{source_id}/toggle-archive",
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Account Sync Logs
   * Retrieve the most recent sync logs for a Plaid-connected account.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.limit
   * @returns PlaidSyncLogOut Successful Response
   * @throws ApiError
   */
  public static getAccountSyncLogs(
    data: AccountsGetAccountSyncLogsData,
  ): CancelablePromise<AccountsGetAccountSyncLogsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/accounts/{source_id}/sync-logs",
      path: {
        source_id: data.sourceId,
      },
      query: {
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class AdminService {
  /**
   * Reseed Account Page
   * @param data The data for the request.
   * @param data.userId
   * @returns string Successful Response
   * @throws ApiError
   */
  public static reseedAccountPage(
    data: AdminReseedAccountPageData,
  ): CancelablePromise<AdminReseedAccountPageResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/admin/reseed-account-page/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class BudgetsService {
  /**
   * Get Budget Entries
   * @param data The data for the request.
   * @param data.budgetId
   * @returns BudgetEntryOut Successful Response
   * @throws ApiError
   */
  public static getBudgetEntries(
    data: BudgetsGetBudgetEntriesData,
  ): CancelablePromise<BudgetsGetBudgetEntriesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/budgets/{budget_id}/entries",
      path: {
        budget_id: data.budgetId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create Budget Entry
   * @param data The data for the request.
   * @param data.budgetId
   * @param data.requestBody
   * @returns BudgetEntryOut Successful Response
   * @throws ApiError
   */
  public static createBudgetEntry(
    data: BudgetsCreateBudgetEntryData,
  ): CancelablePromise<BudgetsCreateBudgetEntryResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/budgets/{budget_id}/entries",
      path: {
        budget_id: data.budgetId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Budget Entry
   * @param data The data for the request.
   * @param data.entryId
   * @param data.requestBody
   * @returns BudgetEntryOut Successful Response
   * @throws ApiError
   */
  public static updateBudgetEntry(
    data: BudgetsUpdateBudgetEntryData,
  ): CancelablePromise<BudgetsUpdateBudgetEntryResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/budgets/entry/{entry_id}",
      path: {
        entry_id: data.entryId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Budget Entry
   * @param data The data for the request.
   * @param data.entryId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteBudgetEntry(
    data: BudgetsDeleteBudgetEntryData,
  ): CancelablePromise<BudgetsDeleteBudgetEntryResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/budgets/entry/{entry_id}",
      path: {
        entry_id: data.entryId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Budget Categories
   * @param data The data for the request.
   * @param data.budgetEntryId
   * @returns BudgetCategoryLinkOut Successful Response
   * @throws ApiError
   */
  public static getBudgetCategories(
    data: BudgetsGetBudgetCategoriesData,
  ): CancelablePromise<BudgetsGetBudgetCategoriesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/budgets/{budget_entry_id}/categories",
      path: {
        budget_entry_id: data.budgetEntryId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create Budget Category
   * @param data The data for the request.
   * @param data.budgetEntryId
   * @param data.requestBody
   * @returns BudgetCategoryLinkOut Successful Response
   * @throws ApiError
   */
  public static createBudgetCategory(
    data: BudgetsCreateBudgetCategoryData,
  ): CancelablePromise<BudgetsCreateBudgetCategoryResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/budgets/{budget_entry_id}/categories",
      path: {
        budget_entry_id: data.budgetEntryId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Budget Category
   * @param data The data for the request.
   * @param data.categoryLinkId
   * @param data.requestBody
   * @returns BudgetCategoryLinkOut Successful Response
   * @throws ApiError
   */
  public static updateBudgetCategory(
    data: BudgetsUpdateBudgetCategoryData,
  ): CancelablePromise<BudgetsUpdateBudgetCategoryResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/budgets/categories/{category_link_id}",
      path: {
        category_link_id: data.categoryLinkId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Budget Category
   * @param data The data for the request.
   * @param data.categoryLinkId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteBudgetCategory(
    data: BudgetsDeleteBudgetCategoryData,
  ): CancelablePromise<BudgetsDeleteBudgetCategoryResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/budgets/categories/{category_link_id}",
      path: {
        category_link_id: data.categoryLinkId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Budget Status
   * @returns BudgetStatus Successful Response
   * @throws ApiError
   */
  public static getBudgetStatus(): CancelablePromise<BudgetsGetBudgetStatusResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/budgets/budget_status",
    });
  }
}

export class DemoService {
  /**
   * Get Demo Aggregated Transactions
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AggregatedTransactions Successful Response
   * @throws ApiError
   */
  public static getDemoAggregatedTransactions(
    data: DemoGetDemoAggregatedTransactionsData = {},
  ): CancelablePromise<DemoGetDemoAggregatedTransactionsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/demo/demo_aggregated",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Logout
   * Logout endpoint that clears the access token cookie
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static logout(): CancelablePromise<LoginLogoutResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/logout",
    });
  }

  /**
   * Test Token
   * Test access token
   * @returns UserOut Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    });
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class NoCodeService {
  /**
   * Get Effects
   * Get all notification effects for the current user
   * @returns EffectOut Successful Response
   * @throws ApiError
   */
  public static getEffects(): CancelablePromise<NoCodeGetEffectsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/notification/effects",
    });
  }

  /**
   * Create Effect
   * Create a new notification effect
   * @param data The data for the request.
   * @param data.requestBody
   * @returns EffectOut Successful Response
   * @throws ApiError
   */
  public static createEffect(
    data: NoCodeCreateEffectData,
  ): CancelablePromise<NoCodeCreateEffectResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/notification/effects",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Preview Notification
   * Preview a notification with sample data
   * @param data The data for the request.
   * @param data.effectType
   * @param data.eventType
   * @param data.template
   * @param data.subject
   * @param data.numTransactions
   * @param data.accountName
   * @returns Email Successful Response
   * @throws ApiError
   */
  public static previewNotification(
    data: NoCodePreviewNotificationData = {},
  ): CancelablePromise<NoCodePreviewNotificationResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/notification/preview",
      query: {
        effect_type: data.effectType,
        event_type: data.eventType,
        template: data.template,
        subject: data.subject,
        num_transactions: data.numTransactions,
        account_name: data.accountName,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Effect
   * Update an existing notification effect
   * @param data The data for the request.
   * @param data.effectId
   * @param data.requestBody
   * @returns EffectOut Successful Response
   * @throws ApiError
   */
  public static updateEffect(
    data: NoCodeUpdateEffectData,
  ): CancelablePromise<NoCodeUpdateEffectResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/notification/effects/{effect_id}",
      path: {
        effect_id: data.effectId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Effect
   * Delete a notification effect
   * @param data The data for the request.
   * @param data.effectId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteEffect(
    data: NoCodeDeleteEffectData,
  ): CancelablePromise<NoCodeDeleteEffectResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/notification/effects/{effect_id}",
      path: {
        effect_id: data.effectId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get No Code Tool
   * @returns NoCodeToolOut Successful Response
   * @throws ApiError
   */
  public static getNoCodeTool(): CancelablePromise<NoCodeGetNoCodeToolResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/no_code/get_no_code_tools",
    });
  }

  /**
   * Save No Code Tool
   * @param data The data for the request.
   * @param data.requestBody
   * @returns NoCodeWidgetOut Successful Response
   * @throws ApiError
   */
  public static saveNoCodeTool(
    data: NoCodeSaveNoCodeToolData,
  ): CancelablePromise<NoCodeSaveNoCodeToolResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/no_code/save_no_code_tool",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Refetch Widget
   * @param data The data for the request.
   * @param data.widgetId
   * @param data.requestBody
   * @returns NoCodeWidgetOut Successful Response
   * @throws ApiError
   */
  public static refetchWidget(
    data: NoCodeRefetchWidgetData,
  ): CancelablePromise<NoCodeRefetchWidgetResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/no_code/refetch_widget",
      query: {
        widget_id: data.widgetId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Parameter
   * @param data The data for the request.
   * @param data.parameterId
   * @param data.requestBody
   * @returns string Successful Response
   * @throws ApiError
   */
  public static updateParameter(
    data: NoCodeUpdateParameterData,
  ): CancelablePromise<NoCodeUpdateParameterResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/no_code/update_parameter",
      query: {
        parameter_id: data.parameterId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Widget
   * @param data The data for the request.
   * @param data.widgetId
   * @param data.requestBody
   * @returns string Successful Response
   * @throws ApiError
   */
  public static updateWidget(
    data: NoCodeUpdateWidgetData,
  ): CancelablePromise<NoCodeUpdateWidgetResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/no_code/update_widget",
      query: {
        widget_id: data.widgetId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get No Code Dashboard
   * @param data The data for the request.
   * @param data.variant
   * @returns NoCodeCanvasOut Successful Response
   * @throws ApiError
   */
  public static getNoCodeDashboard(
    data: NoCodeGetNoCodeDashboardData,
  ): CancelablePromise<NoCodeGetNoCodeDashboardResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/no_code/get_no_code_dashboard",
      query: {
        variant: data.variant,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class OauthService {
  /**
   * Login Google
   * Initiate Google OAuth login flow.
   * Returns the authorization URL that the frontend should redirect to.
   * @returns LoginGoogleData Successful Response
   * @throws ApiError
   */
  public static loginGoogle(): CancelablePromise<OauthLoginGoogleResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/oauth/google/login",
    });
  }

  /**
   * Google Callback
   * Handle the callback from Google OAuth.
   * This endpoint is called by the frontend after receiving the code from Google.
   * @param data The data for the request.
   * @param data.code
   * @param data.error
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static googleCallback(
    data: OauthGoogleCallbackData,
  ): CancelablePromise<OauthGoogleCallbackResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/oauth/google/callback",
      query: {
        code: data.code,
        error: data.error,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class PlaidService {
  /**
   * Get Link Token
   * Create a link token for Plaid Link.
   * @returns PlaidLinkTokenResponse Successful Response
   * @throws ApiError
   */
  public static getLinkToken(): CancelablePromise<PlaidGetLinkTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/plaid/create_link_token",
    });
  }

  /**
   * Exchange Token
   * Exchange a public token for an access token and get accounts.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns PlaidAccountResponse Successful Response
   * @throws ApiError
   */
  public static exchangeToken(
    data: PlaidExchangeTokenData,
  ): CancelablePromise<PlaidExchangeTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/plaid/exchange_token",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Plaid Accounts
   * @returns PlaidAccountResponse Successful Response
   * @throws ApiError
   */
  public static getPlaidAccounts(): CancelablePromise<PlaidGetPlaidAccountsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/plaid/accounts",
    });
  }
}

export class PosService {
  /**
   * Get Menu
   * Get all menu items (orderables) with their variant groups and variants
   * @returns OrderableBase_Output Successful Response
   * @throws ApiError
   */
  public static getMenu(): CancelablePromise<PosGetMenuResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/pos/menu",
    });
  }

  /**
   * Create Menu Item
   * Create a new menu item with its variant groups and variants
   * @param data The data for the request.
   * @param data.requestBody
   * @returns OrderableBase_Output Successful Response
   * @throws ApiError
   */
  public static createMenuItem(
    data: PosCreateMenuItemData,
  ): CancelablePromise<PosCreateMenuItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/pos/menu",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Menu Item
   * Update a menu item with its variant groups and variants
   * @param data The data for the request.
   * @param data.orderableId
   * @param data.requestBody
   * @returns OrderableBase_Output Successful Response
   * @throws ApiError
   */
  public static updateMenuItem(
    data: PosUpdateMenuItemData,
  ): CancelablePromise<PosUpdateMenuItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/pos/menu/{orderable_id}",
      path: {
        orderable_id: data.orderableId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Menu Item
   * Delete a menu item
   * @param data The data for the request.
   * @param data.orderableId
   * @returns string Successful Response
   * @throws ApiError
   */
  public static deleteMenuItem(
    data: PosDeleteMenuItemData,
  ): CancelablePromise<PosDeleteMenuItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/pos/menu/{orderable_id}",
      path: {
        orderable_id: data.orderableId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Orders
   * Get all orders for the current user
   * @returns OrderBase_Output Successful Response
   * @throws ApiError
   */
  public static getOrders(): CancelablePromise<PosGetOrdersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/pos/orders",
    });
  }

  /**
   * Create Order
   * Create a new order with order items and selected variants
   * @param data The data for the request.
   * @param data.requestBody
   * @returns OrderBase_Output Successful Response
   * @throws ApiError
   */
  public static createOrder(
    data: PosCreateOrderData,
  ): CancelablePromise<PosCreateOrderResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/pos/orders",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class SankeyService {
  /**
   * Get Sankey Data
   * @returns SankeyData Successful Response
   * @throws ApiError
   */
  public static getSankeyData(): CancelablePromise<SankeyGetSankeyDataResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/sankey/",
    });
  }

  /**
   * Create Sankey Config
   * @param data The data for the request.
   * @param data.requestBody
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static createSankeyConfig(
    data: SankeyCreateSankeyConfigData,
  ): CancelablePromise<SankeyCreateSankeyConfigResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/sankey/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Sankey Config Info
   * @returns SankeyConfigInfo Successful Response
   * @throws ApiError
   */
  public static getSankeyConfigInfo(): CancelablePromise<SankeyGetSankeyConfigInfoResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/sankey/config-info",
    });
  }
}

export class SavedFiltersService {
  /**
   * Create Saved Filter
   * Create a new saved filter.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SavedFilterOut Successful Response
   * @throws ApiError
   */
  public static createSavedFilter(
    data: SavedFiltersCreateSavedFilterData,
  ): CancelablePromise<SavedFiltersCreateSavedFilterResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/saved-filters/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Read Saved Filters
   * Retrieve saved filters.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns SavedFilterOut Successful Response
   * @throws ApiError
   */
  public static readSavedFilters(
    data: SavedFiltersReadSavedFiltersData = {},
  ): CancelablePromise<SavedFiltersReadSavedFiltersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/saved-filters/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Read Saved Filter
   * Get a specific saved filter by ID.
   * @param data The data for the request.
   * @param data.filterId
   * @returns SavedFilterOut Successful Response
   * @throws ApiError
   */
  public static readSavedFilter(
    data: SavedFiltersReadSavedFilterData,
  ): CancelablePromise<SavedFiltersReadSavedFilterResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/saved-filters/{filter_id}",
      path: {
        filter_id: data.filterId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Saved Filter
   * Update a saved filter.
   * @param data The data for the request.
   * @param data.filterId
   * @param data.requestBody
   * @returns SavedFilterOut Successful Response
   * @throws ApiError
   */
  public static updateSavedFilter(
    data: SavedFiltersUpdateSavedFilterData,
  ): CancelablePromise<SavedFiltersUpdateSavedFilterResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/saved-filters/{filter_id}",
      path: {
        filter_id: data.filterId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Saved Filter
   * Delete a saved filter.
   * @param data The data for the request.
   * @param data.filterId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteSavedFilter(
    data: SavedFiltersDeleteSavedFilterData,
  ): CancelablePromise<SavedFiltersDeleteSavedFilterResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/saved-filters/{filter_id}",
      path: {
        filter_id: data.filterId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Read Saved Filter By Name
   * Get a specific saved filter by name.
   * @param data The data for the request.
   * @param data.filterName
   * @returns SavedFilterOut Successful Response
   * @throws ApiError
   */
  public static readSavedFilterByName(
    data: SavedFiltersReadSavedFilterByNameData,
  ): CancelablePromise<SavedFiltersReadSavedFilterByNameResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/saved-filters/by-name/{filter_name}",
      path: {
        filter_name: data.filterName,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class SitemapService {
  /**
   * Sitemap
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static sitemap(): CancelablePromise<SitemapSitemapResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/sitemap.xml",
    });
  }
}

export class SubscriptionService {
  /**
   * Get Subscription Status
   * Get the current user's subscription status.
   * @returns SubscriptionDetails Successful Response
   * @throws ApiError
   */
  public static getSubscriptionStatus(): CancelablePromise<SubscriptionGetSubscriptionStatusResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/subscription/status",
    });
  }

  /**
   * Check Subscription Limits
   * Check if the user has reached their subscription limits.
   * @returns SubscriptionLimits Successful Response
   * @throws ApiError
   */
  public static checkSubscriptionLimits(): CancelablePromise<SubscriptionCheckSubscriptionLimitsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/subscription/check-limits",
    });
  }

  /**
   * Get Subscription Plans
   * Get available subscription plans.
   * @returns PriceDetails Successful Response
   * @throws ApiError
   */
  public static getSubscriptionPlans(): CancelablePromise<SubscriptionGetSubscriptionPlansResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/subscription/plans",
    });
  }

  /**
   * Create Checkout Session
   * Create a checkout session for a subscription.
   * @param data The data for the request.
   * @param data.priceId
   * @returns CheckoutSession Successful Response
   * @throws ApiError
   */
  public static createCheckoutSession(
    data: SubscriptionCreateCheckoutSessionData,
  ): CancelablePromise<SubscriptionCreateCheckoutSessionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/subscription/checkout",
      query: {
        price_id: data.priceId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Cancel Subscription
   * Cancel the current user's subscription at the end of the billing period.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static cancelSubscription(): CancelablePromise<SubscriptionCancelSubscriptionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/subscription/cancel",
    });
  }

  /**
   * Stripe Webhook
   * Handle Stripe webhook events.
   * @param data The data for the request.
   * @param data.stripeSignature
   * @returns string Successful Response
   * @throws ApiError
   */
  public static stripeWebhook(
    data: SubscriptionStripeWebhookData = {},
  ): CancelablePromise<SubscriptionStripeWebhookResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/subscription/webhook",
      headers: {
        "stripe-signature": data.stripeSignature,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Sync Prices
   * Sync prices from Stripe to the database.
   * Admin only endpoint.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static syncPrices(): CancelablePromise<SubscriptionSyncPricesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/subscription/sync-prices",
    });
  }
}

export class TransactionsService {
  /**
   * Get Transactions
   * @returns TransactionOut Successful Response
   * @throws ApiError
   */
  public static getTransactions(): CancelablePromise<TransactionsGetTransactionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/transactions/",
    });
  }

  /**
   * Get Aggregated Transactions
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AggregatedTransactions Successful Response
   * @throws ApiError
   */
  public static getAggregatedTransactions(
    data: TransactionsGetAggregatedTransactionsData = {},
  ): CancelablePromise<TransactionsGetAggregatedTransactionsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/transactions/aggregated",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Transaction
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TransactionOut Successful Response
   * @throws ApiError
   */
  public static updateTransaction(
    data: TransactionsUpdateTransactionData,
  ): CancelablePromise<TransactionsUpdateTransactionResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/transactions/{transaction_id}",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Transaction
   * @param data The data for the request.
   * @param data.transactionId
   * @returns string Successful Response
   * @throws ApiError
   */
  public static deleteTransaction(
    data: TransactionsDeleteTransactionData,
  ): CancelablePromise<TransactionsDeleteTransactionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/transactions/delete/{transaction_id}",
      path: {
        transaction_id: data.transactionId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * List Categories
   * @param data The data for the request.
   * @param data.transactionId
   * @returns CategoryOut Successful Response
   * @throws ApiError
   */
  public static listCategories(
    data: TransactionsListCategoriesData,
  ): CancelablePromise<TransactionsListCategoriesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/transactionslist_categories/{transaction_id}",
      path: {
        transaction_id: data.transactionId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * List All Categories
   * @returns CategoryOut Successful Response
   * @throws ApiError
   */
  public static listAllCategories(): CancelablePromise<TransactionsListAllCategoriesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/transactionslist_all_categories",
    });
  }

  /**
   * Get Landing Status
   * @returns LandingStatus Successful Response
   * @throws ApiError
   */
  public static getLandingStatus(): CancelablePromise<TransactionsGetLandingStatusResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/transactionsget_landing_status",
    });
  }
}

export class TwoFactorService {
  /**
   * Enable 2Fa
   * Start the 2FA setup process
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Enable2FAResponse Successful Response
   * @throws ApiError
   */
  public static enable2Fa(
    data: TwoFactorEnable2FaData,
  ): CancelablePromise<TwoFactorEnable2FaResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/two-factor/enable",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Verify 2Fa
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Verify2FAResponse Successful Response
   * @throws ApiError
   */
  public static verify2Fa(
    data: TwoFactorVerify2FaData,
  ): CancelablePromise<TwoFactorVerify2FaResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/two-factor/verify",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Verify 2Fa Login
   * Verify the 2FA code during login
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static verify2FaLogin(
    data: TwoFactorVerify2FaLoginData,
  ): CancelablePromise<TwoFactorVerify2FaLoginResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/two-factor/verify-login",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Reject 2Fa
   * Reject the 2FA setup during login
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static reject2Fa(
    data: TwoFactorReject2FaData,
  ): CancelablePromise<TwoFactorReject2FaResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/two-factor/reject-tfa",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Disable 2Fa
   * Disable 2FA for a user
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Verify2FAResponse Successful Response
   * @throws ApiError
   */
  public static disable2Fa(
    data: TwoFactorDisable2FaData,
  ): CancelablePromise<TwoFactorDisable2FaResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/two-factor/disable",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class UploadsService {
  /**
   * Reprocess File
   * Reprocess an uploaded file by job ID.
   * @param data The data for the request.
   * @param data.jobId
   * @returns ProcessFileJobOut Successful Response
   * @throws ApiError
   */
  public static reprocessFile(
    data: UploadsReprocessFileData,
  ): CancelablePromise<UploadsReprocessFileResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/uploads/reprocess/{job_id}",
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Uploads
   * Retrieve user uploads along with their associated jobs.
   * @returns UploadedPdfOut Successful Response
   * @throws ApiError
   */
  public static getUploads(): CancelablePromise<UploadsGetUploadsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/uploads/",
    });
  }

  /**
   * Upload Files
   * @param data The data for the request.
   * @param data.formData
   * @returns UploadedPdfOut Successful Response
   * @throws ApiError
   */
  public static uploadFiles(
    data: UploadsUploadFilesData,
  ): CancelablePromise<UploadsUploadFilesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/uploads/",
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Is Uploading
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static isUploading(): CancelablePromise<UploadsIsUploadingResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/uploads/is_uploading",
    });
  }

  /**
   * Delete File
   * @param data The data for the request.
   * @param data.fileId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteFile(
    data: UploadsDeleteFileData,
  ): CancelablePromise<UploadsDeleteFileResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/uploads/{file_id}",
      path: {
        file_id: data.fileId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class UsersService {
  /**
   * Read Users
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserOut Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserOut Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    });
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    });
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserOut Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Read User Me Optional
   * Get current user.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static readUserMeOptional(): CancelablePromise<UsersReadUserMeOptionalResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me-optional",
    });
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserOut Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserOut Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    });
  }
}

export class WorkerStatusService {
  /**
   * Get Status
   * @returns WorkerStatusOut Successful Response
   * @throws ApiError
   */
  public static getStatus(): CancelablePromise<WorkerStatusGetStatusResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/worker-status/status",
    });
  }
}
