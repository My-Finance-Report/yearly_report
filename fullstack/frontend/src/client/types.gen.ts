// This file is auto-generated by @hey-api/openapi-ts

export type AggregatedGroup = {
    group_id: (number | string);
    group_name: string;
    groupby_kind: (GroupByOption | null);
    total_withdrawals: number;
    total_deposits: number;
    total_balance: number;
    subgroups?: Array<AggregatedGroup>;
    transactions?: Array<TransactionOut>;
};

export type AggregatedTransactions = {
    groups: Array<TransactionSourceGroup>;
    overall_withdrawals: number;
    overall_deposits: number;
    overall_balance: number;
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_uploads_upload_files = {
    files: Array<((Blob | File))>;
};

export type CategoryBase = {
    name: string;
    source_id: number;
    archived?: boolean;
};

export type CategoryOut = {
    name: string;
    source_id: number;
    archived?: boolean;
    id: number;
};

export type GroupByOption = 'category' | 'month' | 'year';

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type JobStatus = 'completed' | 'pending' | 'processing' | 'failed';

export type Message = {
    message: string;
};

export type NewPassword = {
    token: Token;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type ProcessFileJobOut = {
    created_at: string;
    last_tried_at?: (string | null);
    status: JobStatus;
    user_id: number;
    config_id?: (number | null);
    pdf_id: number;
    archived?: boolean;
    attempt_count?: number;
    id: number;
};

export type SourceKind = 'account' | 'investment' | 'card';

export type Token = {
    access_token: string;
    token_type?: string;
};

export type TransactionKind = 'withdrawal' | 'deposit';

export type TransactionOut = {
    description: string;
    category_id: number;
    date_of_transaction: string;
    amount: number;
    transaction_source_id: number;
    kind: TransactionKind;
    uploaded_pdf_id?: (number | null);
    archived?: boolean;
    id: number;
};

export type TransactionSourceBase = {
    name: string;
    archived?: boolean;
    source_kind?: SourceKind;
};

export type TransactionSourceGroup = {
    transaction_source_id: number;
    transaction_source_name: string;
    total_withdrawals: number;
    total_deposits: number;
    total_balance: number;
    groups: Array<AggregatedGroup>;
};

export type TransactionSourceOut = {
    name: string;
    archived?: boolean;
    source_kind?: SourceKind;
    id: number;
};

export type UploadedPdfOut = {
    filename: string;
    raw_content: string;
    raw_content_hash: string;
    upload_time: string;
    user_id: number;
    archived?: boolean;
    id: number;
    job?: (ProcessFileJobOut | null);
};

export type UserNewPassword = {
    new_password: string;
    old_password: string;
};

export type UserOut = {
    full_name: string;
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    id: number;
    created_at?: (string | null);
    updated_at?: (string | null);
};

export type UserRegister = {
    email: string;
    password: string;
    full_name: string;
    is_superuser?: boolean;
    is_active?: boolean;
};

export type UsersPublic = {
    data: Array<UserOut>;
    count: number;
};

export type UserUpdate = {
    id: number;
    password: (string | null);
    full_name: string;
    email: string;
    is_superuser?: boolean;
    is_active?: boolean;
};

export type UserUpdateMe = {
    email: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type AccountsGetTransactionSourcesResponse = (Array<TransactionSourceOut>);

export type AccountsCreateTransactionSourceData = {
    requestBody: TransactionSourceBase;
};

export type AccountsCreateTransactionSourceResponse = (TransactionSourceOut);

export type AccountsUpdateTransactionSourceData = {
    requestBody: TransactionSourceBase;
    sourceId: number;
};

export type AccountsUpdateTransactionSourceResponse = (TransactionSourceOut);

export type AccountsDeleteTransactionSourceData = {
    sourceId: number;
};

export type AccountsDeleteTransactionSourceResponse = (unknown);

export type AccountsGetCategoriesData = {
    sourceId: number;
};

export type AccountsGetCategoriesResponse = (Array<CategoryOut>);

export type AccountsCreateCategoryData = {
    requestBody: CategoryBase;
    sourceId: number;
};

export type AccountsCreateCategoryResponse = (CategoryOut);

export type AccountsUpdateCategoryData = {
    categoryId: number;
    requestBody: CategoryBase;
};

export type AccountsUpdateCategoryResponse = (CategoryOut);

export type AccountsDeleteCategoryData = {
    categoryId: number;
};

export type AccountsDeleteCategoryResponse = (unknown);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserOut);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserOut);

export type TransactionsGetTransactionsResponse = (Array<TransactionOut>);

export type TransactionsGetAggregatedTransactionsData = {
    /**
     * List of grouping options in order (e.g. category, month)
     */
    groupBy?: Array<GroupByOption>;
};

export type TransactionsGetAggregatedTransactionsResponse = (AggregatedTransactions);

export type UploadsReprocessFileData = {
    jobId: number;
};

export type UploadsReprocessFileResponse = (ProcessFileJobOut);

export type UploadsGetUploadsResponse = (Array<UploadedPdfOut>);

export type UploadsUploadFilesData = {
    formData: Body_uploads_upload_files;
};

export type UploadsUploadFilesResponse = (Array<UploadedPdfOut>);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserRegister;
};

export type UsersCreateUserResponse = (UserOut);

export type UsersReadUserMeResponse = (UserOut);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserOut);

export type UsersUpdatePasswordMeData = {
    requestBody: UserNewPassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserOut);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserOut);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserOut);

export type UsersDeleteUserData = {
    userId: number;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);