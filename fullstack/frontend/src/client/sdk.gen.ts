// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AccountsGetTransactionSourcesResponse, AccountsCreateTransactionSourceData, AccountsCreateTransactionSourceResponse, AccountsUpdateTransactionSourceData, AccountsUpdateTransactionSourceResponse, AccountsDeleteTransactionSourceData, AccountsDeleteTransactionSourceResponse, AccountsGetCategoriesData, AccountsGetCategoriesResponse, AccountsCreateCategoryData, AccountsCreateCategoryResponse, AccountsUpdateCategoryData, AccountsUpdateCategoryResponse, AccountsDeleteCategoryData, AccountsDeleteCategoryResponse, BudgetsGetBudgetResponse, BudgetsCreateBudgetData, BudgetsCreateBudgetResponse, BudgetsUpdateBudgetData, BudgetsUpdateBudgetResponse, BudgetsDeleteBudgetData, BudgetsDeleteBudgetResponse, BudgetsGetBudgetEntriesData, BudgetsGetBudgetEntriesResponse, BudgetsCreateBudgetEntryData, BudgetsCreateBudgetEntryResponse, BudgetsUpdateBudgetEntryData, BudgetsUpdateBudgetEntryResponse, BudgetsDeleteBudgetEntryData, BudgetsDeleteBudgetEntryResponse, BudgetsGetBudgetCategoriesData, BudgetsGetBudgetCategoriesResponse, BudgetsCreateBudgetCategoryData, BudgetsCreateBudgetCategoryResponse, BudgetsUpdateBudgetCategoryData, BudgetsUpdateBudgetCategoryResponse, BudgetsDeleteBudgetCategoryData, BudgetsDeleteBudgetCategoryResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserResponse, SankeyGetSankeyDataResponse, SankeyCreateSankeyConfigData, SankeyCreateSankeyConfigResponse, SankeyGetSankeyConfigInfoResponse, TransactionsGetTransactionsResponse, TransactionsGetAggregatedTransactionsData, TransactionsGetAggregatedTransactionsResponse, TransactionsUpdateTransactionData, TransactionsUpdateTransactionResponse, TransactionsListCategoriesData, TransactionsListCategoriesResponse, TransactionsListAllCategoriesResponse, UploadsReprocessFileData, UploadsReprocessFileResponse, UploadsGetUploadsResponse, UploadsUploadFilesData, UploadsUploadFilesResponse, UploadsIsUploadingResponse, UploadsDeleteFileData, UploadsDeleteFileResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class AccountsService {
    /**
     * Get Transaction Sources
     * @returns TransactionSourceOut Successful Response
     * @throws ApiError
     */
    public static getTransactionSources(): CancelablePromise<AccountsGetTransactionSourcesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/accounts/'
        });
    }
    
    /**
     * Create Transaction Source
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TransactionSourceOut Successful Response
     * @throws ApiError
     */
    public static createTransactionSource(data: AccountsCreateTransactionSourceData): CancelablePromise<AccountsCreateTransactionSourceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/accounts/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Transaction Source
     * @param data The data for the request.
     * @param data.sourceId
     * @param data.requestBody
     * @returns TransactionSourceOut Successful Response
     * @throws ApiError
     */
    public static updateTransactionSource(data: AccountsUpdateTransactionSourceData): CancelablePromise<AccountsUpdateTransactionSourceResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/accounts/{source_id}',
            path: {
                source_id: data.sourceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Transaction Source
     * @param data The data for the request.
     * @param data.sourceId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteTransactionSource(data: AccountsDeleteTransactionSourceData): CancelablePromise<AccountsDeleteTransactionSourceResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/accounts/{source_id}',
            path: {
                source_id: data.sourceId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Categories
     * @param data The data for the request.
     * @param data.sourceId
     * @returns CategoryOut Successful Response
     * @throws ApiError
     */
    public static getCategories(data: AccountsGetCategoriesData): CancelablePromise<AccountsGetCategoriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/accounts/{source_id}/categories',
            path: {
                source_id: data.sourceId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Category
     * @param data The data for the request.
     * @param data.sourceId
     * @param data.requestBody
     * @returns CategoryOut Successful Response
     * @throws ApiError
     */
    public static createCategory(data: AccountsCreateCategoryData): CancelablePromise<AccountsCreateCategoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/accounts/{source_id}/categories',
            path: {
                source_id: data.sourceId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Category
     * @param data The data for the request.
     * @param data.categoryId
     * @param data.requestBody
     * @returns CategoryOut Successful Response
     * @throws ApiError
     */
    public static updateCategory(data: AccountsUpdateCategoryData): CancelablePromise<AccountsUpdateCategoryResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/accounts/categories/{category_id}',
            path: {
                category_id: data.categoryId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Category
     * @param data The data for the request.
     * @param data.categoryId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteCategory(data: AccountsDeleteCategoryData): CancelablePromise<AccountsDeleteCategoryResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/accounts/categories/{category_id}',
            path: {
                category_id: data.categoryId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class BudgetsService {
    /**
     * Get Budget
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getBudget(): CancelablePromise<BudgetsGetBudgetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/budgets/'
        });
    }
    
    /**
     * Create Budget
     * @param data The data for the request.
     * @param data.requestBody
     * @returns BudgetOut Successful Response
     * @throws ApiError
     */
    public static createBudget(data: BudgetsCreateBudgetData): CancelablePromise<BudgetsCreateBudgetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/budgets/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Budget
     * @param data The data for the request.
     * @param data.budgetId
     * @param data.requestBody
     * @returns BudgetOut Successful Response
     * @throws ApiError
     */
    public static updateBudget(data: BudgetsUpdateBudgetData): CancelablePromise<BudgetsUpdateBudgetResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/budgets/{budget_id}',
            path: {
                budget_id: data.budgetId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Budget
     * @param data The data for the request.
     * @param data.budgetId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteBudget(data: BudgetsDeleteBudgetData): CancelablePromise<BudgetsDeleteBudgetResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/budgets/{budget_id}',
            path: {
                budget_id: data.budgetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Budget Entries
     * @param data The data for the request.
     * @param data.budgetId
     * @returns BudgetEntryOut Successful Response
     * @throws ApiError
     */
    public static getBudgetEntries(data: BudgetsGetBudgetEntriesData): CancelablePromise<BudgetsGetBudgetEntriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/budgets/{budget_id}/entries',
            path: {
                budget_id: data.budgetId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Budget Entry
     * @param data The data for the request.
     * @param data.budgetId
     * @param data.requestBody
     * @returns BudgetEntryOut Successful Response
     * @throws ApiError
     */
    public static createBudgetEntry(data: BudgetsCreateBudgetEntryData): CancelablePromise<BudgetsCreateBudgetEntryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/budgets/{budget_id}/entries',
            path: {
                budget_id: data.budgetId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Budget Entry
     * @param data The data for the request.
     * @param data.entryId
     * @param data.requestBody
     * @returns BudgetEntryOut Successful Response
     * @throws ApiError
     */
    public static updateBudgetEntry(data: BudgetsUpdateBudgetEntryData): CancelablePromise<BudgetsUpdateBudgetEntryResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/budgets/entry/{entry_id}',
            path: {
                entry_id: data.entryId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Budget Entry
     * @param data The data for the request.
     * @param data.entryId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteBudgetEntry(data: BudgetsDeleteBudgetEntryData): CancelablePromise<BudgetsDeleteBudgetEntryResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/budgets/entry/{entry_id}',
            path: {
                entry_id: data.entryId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Budget Categories
     * @param data The data for the request.
     * @param data.budgetEntryId
     * @returns BudgetCategoryLinkOut Successful Response
     * @throws ApiError
     */
    public static getBudgetCategories(data: BudgetsGetBudgetCategoriesData): CancelablePromise<BudgetsGetBudgetCategoriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/budgets/{budget_entry_id}/categories',
            path: {
                budget_entry_id: data.budgetEntryId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Budget Category
     * @param data The data for the request.
     * @param data.budgetEntryId
     * @param data.requestBody
     * @returns BudgetCategoryLinkOut Successful Response
     * @throws ApiError
     */
    public static createBudgetCategory(data: BudgetsCreateBudgetCategoryData): CancelablePromise<BudgetsCreateBudgetCategoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/budgets/{budget_entry_id}/categories',
            path: {
                budget_entry_id: data.budgetEntryId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Budget Category
     * @param data The data for the request.
     * @param data.categoryLinkId
     * @param data.requestBody
     * @returns BudgetCategoryLinkOut Successful Response
     * @throws ApiError
     */
    public static updateBudgetCategory(data: BudgetsUpdateBudgetCategoryData): CancelablePromise<BudgetsUpdateBudgetCategoryResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/budgets/categories/{category_link_id}',
            path: {
                category_link_id: data.categoryLinkId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Budget Category
     * @param data The data for the request.
     * @param data.categoryLinkId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteBudgetCategory(data: BudgetsDeleteBudgetCategoryData): CancelablePromise<BudgetsDeleteBudgetCategoryResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/budgets/categories/{category_link_id}',
            path: {
                category_link_id: data.categoryLinkId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class SankeyService {
    /**
     * Get Sankey Data
     * @returns SankeyData Successful Response
     * @throws ApiError
     */
    public static getSankeyData(): CancelablePromise<SankeyGetSankeyDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sankey/'
        });
    }
    
    /**
     * Create Sankey Config
     * @param data The data for the request.
     * @param data.requestBody
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static createSankeyConfig(data: SankeyCreateSankeyConfigData): CancelablePromise<SankeyCreateSankeyConfigResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/sankey/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Sankey Config Info
     * @returns SankeyConfigInfo Successful Response
     * @throws ApiError
     */
    public static getSankeyConfigInfo(): CancelablePromise<SankeyGetSankeyConfigInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sankey/config-info'
        });
    }
    
}

export class TransactionsService {
    /**
     * Get Transactions
     * @returns TransactionOut Successful Response
     * @throws ApiError
     */
    public static getTransactions(): CancelablePromise<TransactionsGetTransactionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/transactions/'
        });
    }
    
    /**
     * Get Aggregated Transactions
     * @param data The data for the request.
     * @param data.groupBy List of grouping options in order (e.g. category, month)
     * @returns AggregatedTransactions Successful Response
     * @throws ApiError
     */
    public static getAggregatedTransactions(data: TransactionsGetAggregatedTransactionsData = {}): CancelablePromise<TransactionsGetAggregatedTransactionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/transactions/aggregated',
            query: {
                group_by: data.groupBy
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Transaction
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TransactionOut Successful Response
     * @throws ApiError
     */
    public static updateTransaction(data: TransactionsUpdateTransactionData): CancelablePromise<TransactionsUpdateTransactionResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/transactions/{transaction_id}',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Categories
     * @param data The data for the request.
     * @param data.transactionId
     * @returns CategoryOut Successful Response
     * @throws ApiError
     */
    public static listCategories(data: TransactionsListCategoriesData): CancelablePromise<TransactionsListCategoriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/transactionslist_categories/{transaction_id}',
            path: {
                transaction_id: data.transactionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List All Categories
     * @returns CategoryOut Successful Response
     * @throws ApiError
     */
    public static listAllCategories(): CancelablePromise<TransactionsListAllCategoriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/transactionslist_all_categories'
        });
    }
    
}

export class UploadsService {
    /**
     * Reprocess File
     * Reprocess an uploaded file by job ID.
     * @param data The data for the request.
     * @param data.jobId
     * @returns ProcessFileJobOut Successful Response
     * @throws ApiError
     */
    public static reprocessFile(data: UploadsReprocessFileData): CancelablePromise<UploadsReprocessFileResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/uploads/reprocess/{job_id}',
            path: {
                job_id: data.jobId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Uploads
     * Retrieve user uploads along with their associated jobs.
     * @returns UploadedPdfOut Successful Response
     * @throws ApiError
     */
    public static getUploads(): CancelablePromise<UploadsGetUploadsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/uploads/'
        });
    }
    
    /**
     * Upload Files
     * @param data The data for the request.
     * @param data.formData
     * @returns UploadedPdfOut Successful Response
     * @throws ApiError
     */
    public static uploadFiles(data: UploadsUploadFilesData): CancelablePromise<UploadsUploadFilesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/uploads/',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Is Uploading
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static isUploading(): CancelablePromise<UploadsIsUploadingResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/uploads/is_uploading'
        });
    }
    
    /**
     * Delete File
     * @param data The data for the request.
     * @param data.fileId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteFile(data: UploadsDeleteFileData): CancelablePromise<UploadsDeleteFileResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/uploads/{file_id}',
            path: {
                file_id: data.fileId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserOut Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}