import pytest
from unittest.mock import patch
import pyotp

from fastapi.testclient import TestClient
from sqlalchemy.orm import Session

from app import crud
from app.core.config import settings
from app.models import User
from app.tests.utils.utils import random_email, random_lower_string
from ....local_types import UserRegister


def test_login_with_2fa_required(client: TestClient, db: Session) -> None:
    """Test login flow when 2FA is required"""
    # Create a user with 2FA enabled
    username = random_email()
    password = random_lower_string()
    user_in = UserRegister(email=username, password=password, full_name="test_user")
    user = crud.create_user(session=db, user=user_in)

    # Set up 2FA for the user
    totp_secret = pyotp.random_base32()
    user.totp_secret = totp_secret
    user.totp_enabled = True
    db.commit()

    # Attempt to login - should return a 2FA challenge
    login_data = {
        "username": username,
        "password": password,
    }

    r = client.post(f"{settings.API_V1_STR}/login/access-token", data=login_data)
    response = r.json()

    # Verify the response indicates 2FA is required
    assert r.status_code == 200
    assert response["access_token"] is None
    assert response["requires_2fa"] is True
    assert "temp_token" in response
    assert response["temp_token"] is not None


def test_verify_2fa_login(client: TestClient, db: Session) -> None:
    """Test verifying 2FA during login"""
    # Create a user with 2FA enabled
    username = random_email()
    password = random_lower_string()
    user_in = UserRegister(email=username, password=password, full_name="test_user")
    user = crud.create_user(session=db, user=user_in)

    # Set up 2FA for the user
    totp_secret = pyotp.random_base32()
    user.totp_secret = totp_secret
    user.totp_enabled = True
    db.commit()

    # First, get a temp token via login
    login_data = {
        "username": username,
        "password": password,
    }

    r = client.post(f"{settings.API_V1_STR}/login/access-token", data=login_data)
    login_response = r.json()
    temp_token = login_response["temp_token"]

    # Generate a valid TOTP code
    totp = pyotp.TOTP(totp_secret)
    valid_code = totp.now()

    # Verify the 2FA code
    verification_data = {"temp_token": temp_token, "code": valid_code}

    r = client.post(
        f"{settings.API_V1_STR}/two-factor/verify-login", json=verification_data
    )

    # Check that we get a valid access token
    assert r.status_code == 200
    response = r.json()
    assert "access_token" in response
    assert response["access_token"] is not None
    assert response["token_type"] == "bearer"


def test_verify_2fa_login_invalid_code(client: TestClient, db: Session) -> None:
    """Test verifying 2FA with an invalid code"""
    # Create a user with 2FA enabled
    username = random_email()
    password = random_lower_string()
    user_in = UserRegister(email=username, password=password, full_name="test_user")
    user = crud.create_user(session=db, user=user_in)

    # Set up 2FA for the user
    totp_secret = pyotp.random_base32()
    user.totp_secret = totp_secret
    user.totp_enabled = True
    db.commit()

    # First, get a temp token via login
    login_data = {
        "username": username,
        "password": password,
    }

    r = client.post(f"{settings.API_V1_STR}/login/access-token", data=login_data)
    login_response = r.json()
    temp_token = login_response["temp_token"]

    # Use an invalid code
    invalid_code = "123456"  # Not generated by TOTP

    # Attempt to verify with invalid code
    verification_data = {"temp_token": temp_token, "code": invalid_code}

    r = client.post(
        f"{settings.API_V1_STR}/two-factor/verify-login", json=verification_data
    )

    # Should return an error
    assert r.status_code == 400
    assert r.json()["detail"] == "Invalid code"


@pytest.mark.skip(reason="Skipping for now")
def test_setup_2fa(client: TestClient, db: Session) -> None:
    """Test setting up 2FA for a user"""
    # Create a user without 2FA
    username = random_email()
    password = random_lower_string()
    user_in = UserRegister(email=username, password=password, full_name="test_user")
    user = crud.create_user(session=db, user=user_in)

    # Get authentication token
    with patch("app.crud.handle_and_respond_to_in_progress_login") as mock_handle_login:
        mock_handle_login.return_value.status_code = 200
        mock_handle_login.return_value.body = (
            '{"access_token": "test_token", "token_type": "bearer"}'.encode()
        )

        login_data = {
            "username": username,
            "password": password,
        }
        r = client.post(f"{settings.API_V1_STR}/login/access-token", data=login_data)

    tokens = r.json()
    a_token = tokens["access_token"]
    headers = {"Authorization": f"Bearer {a_token}"}

    # Request 2FA setup
    r = client.post(f"{settings.API_V1_STR}/two-factor/setup", headers=headers)

    # Check response
    assert r.status_code == 200
    response = r.json()
    assert "secret" in response
    assert "qr_code" in response
    assert "temp_token" in response
