// This file is auto-generated by @hey-api/openapi-ts

export type AggregatedGroup = {
    group_id: (number | string);
    group_name: string;
    groupby_kind: (GroupByOption | null);
    total_withdrawals: number;
    total_deposits: number;
    total_balance: number;
    budgeted_total: number;
    subgroups?: Array<AggregatedGroup>;
    transactions?: Array<TransactionOut>;
};

export type AggregatedTransactions = {
    groups: Array<AggregatedGroup>;
    overall_withdrawals: number;
    group_by_ordering: Array<GroupByOption>;
    overall_deposits: number;
    overall_balance: number;
    grouping_options_choices: {
        [key: string]: Array<(string)>;
    };
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_uploads_upload_files = {
    files: Array<((Blob | File))>;
};

export type BudgetBase = {
    user_id: number;
    name: string;
    active?: boolean;
};

export type BudgetCategoryLinkBase = {
    budget_entry_id: number;
    category_id: number;
};

export type BudgetCategoryLinkCreate = {
    entry_id: number;
    category_id: number;
};

export type BudgetCategoryLinkOut = {
    budget_entry_id: number;
    category_id: number;
    id: number;
    stylized_name: string;
};

export type BudgetCategoryLinkStatus = {
    budget_entry_id: number;
    category_id: number;
    id: number;
    stylized_name: string;
    transactions: Array<TransactionOut>;
    total: string;
};

export type BudgetCreate = {
    name: string;
};

export type BudgetEntryCreate = {
    amount: number;
    name: string;
};

export type BudgetEntryEdit = {
    amount: (number | string);
    id: number;
    name: string;
    budget_id: number;
    category_links: Array<BudgetCategoryLinkCreate>;
};

export type BudgetEntryOut = {
    amount: string;
    id: number;
    name: string;
    budget_id: number;
    user_id: number;
    category_links: Array<BudgetCategoryLinkOut>;
};

export type BudgetEntryStatus = {
    amount: string;
    id: number;
    name: string;
    budget_id: number;
    category_links_status: {
        [key: string]: BudgetCategoryLinkStatus;
    };
    total: string;
};

export type BudgetOut = {
    user_id: number;
    name: string;
    active?: boolean;
    id: number;
    entries: Array<BudgetEntryOut>;
};

export type BudgetStatus = {
    user_id: number;
    name: string;
    active?: boolean;
    entry_status: Array<BudgetEntryStatus>;
    months_with_entries: Array<(string)>;
};

export type CategoryBase = {
    name: string;
    source_id: number;
    archived?: boolean;
};

export type CategoryOut = {
    name: string;
    source_id: number;
    archived?: boolean;
    id: number;
    stylized_name: string;
};

export type CheckoutSession = {
    checkout_url: string;
};

export type GoogleCallbackData = {
    access_token?: (string | null);
    error?: (string | null);
};

export type GroupByOption = 'account' | 'category' | 'month' | 'year' | 'budget';

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type JobStatus = 'completed' | 'pending' | 'processing' | 'failed';

export type LoginGoogleData = {
    url: string;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: Token;
    new_password: string;
};

/**
 * Response model for a Plaid account.
 */
export type PlaidAccountResponse = {
    plaid_account_id: string;
    name: string;
    mask?: (string | null);
    type: string;
    subtype?: (string | null);
    id: number;
    created_at: string;
};

/**
 * Request model for exchanging a public token.
 */
export type PlaidExchangeTokenRequest = {
    public_token: string;
};

/**
 * Response model for a link token.
 */
export type PlaidLinkTokenResponse = {
    link_token: string;
};

export type PossibleSankeyInput = {
    category_id: number;
    source_id: number;
    source_name: string;
    category_name: string;
    siblings: Array<SankeySibling>;
};

export type PossibleSankeyLinkage = {
    category_id: number;
    category_name: string;
    target_source_id: number;
    target_source_name: string;
};

export type PriceDetails = {
    id: number;
    name: string;
    description?: (string | null);
    price: number;
    currency: string;
    interval: string;
    tier: SubscriptionTier;
    max_sources: number;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type ProcessFileJobOut = {
    created_at: string;
    last_tried_at?: (string | null);
    status: JobStatus;
    user_id: number;
    config_id?: (number | null);
    pdf_id: number;
    archived?: boolean;
    attempt_count?: number;
    id: number;
};

export type SankeyConfigCreatePayload = {
    inputs: Array<SankeyInputCreate>;
    links: Array<SankeyLinkageCreate>;
};

export type SankeyConfigInfo = {
    possible_inputs: Array<PossibleSankeyInput>;
    possible_links: Array<PossibleSankeyLinkage>;
    existing_inputs: Array<PossibleSankeyInput>;
    existing_links: Array<PossibleSankeyLinkage>;
};

export type SankeyData = {
    nodes: Array<SankeyNode>;
    links: Array<SankeyLink>;
};

export type SankeyInputCreate = {
    category_id: number;
};

export type SankeyLink = {
    source: number;
    target: number;
    value: number;
};

export type SankeyLinkageCreate = {
    category_id: number;
    target_source_id: number;
};

export type SankeyNode = {
    id: number;
    name: string;
};

export type SankeySibling = {
    category_id: number;
    category_name: string;
    source_id: number;
};

export type SourceKind = 'account' | 'investment' | 'card';

export type SubscriptionDetails = {
    tier: SubscriptionTier;
    status: SubscriptionStatus;
    current_period_end?: (string | null);
    cancel_at_period_end?: boolean;
    max_sources: number;
    current_sources: number;
};

export type SubscriptionLimits = {
    has_reached_limit: boolean;
    current_count: number;
    max_allowed: number;
};

export type SubscriptionStatus = 'active' | 'canceled' | 'incomplete' | 'incomplete_expired' | 'past_due' | 'trialing' | 'unpaid';

export type SubscriptionTier = 'free' | 'premium' | 'business';

export type Token = {
    access_token: string;
    token_type?: string;
};

export type TransactionEdit = {
    description: string;
    category_id: number;
    date_of_transaction: string;
    amount: number;
    transaction_source_id: number;
    kind: TransactionKind;
    uploaded_pdf_id?: (number | null);
    archived?: boolean;
    id: number;
};

export type TransactionKind = 'withdrawal' | 'deposit';

export type TransactionOut = {
    description: string;
    category_id: number;
    date_of_transaction: string;
    amount: number;
    transaction_source_id: number;
    kind: TransactionKind;
    uploaded_pdf_id?: (number | null);
    archived?: boolean;
    id: number;
};

export type TransactionSourceBase = {
    name: string;
    archived?: boolean;
    source_kind?: SourceKind;
};

export type TransactionSourceOut = {
    name: string;
    archived?: boolean;
    source_kind?: SourceKind;
    id: number;
};

export type UploadedPdfOut = {
    filename: string;
    nickname?: (string | null);
    raw_content: string;
    raw_content_hash: string;
    upload_time: string;
    user_id: number;
    archived?: boolean;
    id: number;
    job?: (ProcessFileJobOut | null);
};

export type UserNewPassword = {
    new_password: string;
    old_password: string;
};

export type UserOut = {
    full_name: string;
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    id: number;
    created_at?: (string | null);
    updated_at?: (string | null);
    settings: UserSettings;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name: string;
    is_superuser?: boolean;
    is_active?: boolean;
};

export type UserSettings = {
    has_budget?: boolean;
    power_user_filters?: boolean;
};

export type UsersPublic = {
    data: Array<UserOut>;
    count: number;
};

export type UserUpdate = {
    id: number;
    password: (string | null);
    full_name: string;
    email: string;
    is_superuser?: boolean;
    is_active?: boolean;
};

export type UserUpdateMe = {
    email: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type AccountsGetTransactionSourcesResponse = (Array<TransactionSourceOut>);

export type AccountsCreateTransactionSourceData = {
    requestBody: TransactionSourceBase;
};

export type AccountsCreateTransactionSourceResponse = (TransactionSourceOut);

export type AccountsUpdateTransactionSourceData = {
    requestBody: TransactionSourceBase;
    sourceId: number;
};

export type AccountsUpdateTransactionSourceResponse = (TransactionSourceOut);

export type AccountsDeleteTransactionSourceData = {
    sourceId: number;
};

export type AccountsDeleteTransactionSourceResponse = (unknown);

export type AccountsGetCategoriesData = {
    sourceId: number;
};

export type AccountsGetCategoriesResponse = (Array<CategoryOut>);

export type AccountsCreateCategoryData = {
    requestBody: CategoryBase;
    sourceId: number;
};

export type AccountsCreateCategoryResponse = (CategoryOut);

export type AccountsUpdateCategoryData = {
    categoryId: number;
    requestBody: CategoryBase;
};

export type AccountsUpdateCategoryResponse = (CategoryOut);

export type AccountsDeleteCategoryData = {
    categoryId: number;
};

export type AccountsDeleteCategoryResponse = (unknown);

export type AccountsMergeAccountsData = {
    toKeepId: number;
    toMergeId: number;
};

export type AccountsMergeAccountsResponse = (unknown);

export type BudgetsGetBudgetResponse = ((BudgetOut | null));

export type BudgetsCreateBudgetData = {
    requestBody: BudgetCreate;
};

export type BudgetsCreateBudgetResponse = (BudgetOut);

export type BudgetsUpdateBudgetData = {
    budgetId: number;
    requestBody: BudgetBase;
};

export type BudgetsUpdateBudgetResponse = (BudgetOut);

export type BudgetsDeleteBudgetData = {
    budgetId: number;
};

export type BudgetsDeleteBudgetResponse = (unknown);

export type BudgetsGetBudgetEntriesData = {
    budgetId: number;
};

export type BudgetsGetBudgetEntriesResponse = (Array<BudgetEntryOut>);

export type BudgetsCreateBudgetEntryData = {
    budgetId: number;
    requestBody: BudgetEntryCreate;
};

export type BudgetsCreateBudgetEntryResponse = (BudgetEntryOut);

export type BudgetsUpdateBudgetEntryData = {
    entryId: number;
    requestBody: BudgetEntryEdit;
};

export type BudgetsUpdateBudgetEntryResponse = (BudgetEntryOut);

export type BudgetsDeleteBudgetEntryData = {
    entryId: number;
};

export type BudgetsDeleteBudgetEntryResponse = (unknown);

export type BudgetsGetBudgetCategoriesData = {
    budgetEntryId: number;
};

export type BudgetsGetBudgetCategoriesResponse = (Array<BudgetCategoryLinkOut>);

export type BudgetsCreateBudgetCategoryData = {
    budgetEntryId: number;
    requestBody: BudgetCategoryLinkBase;
};

export type BudgetsCreateBudgetCategoryResponse = (BudgetCategoryLinkOut);

export type BudgetsUpdateBudgetCategoryData = {
    categoryLinkId: number;
    requestBody: BudgetCategoryLinkBase;
};

export type BudgetsUpdateBudgetCategoryResponse = (BudgetCategoryLinkOut);

export type BudgetsDeleteBudgetCategoryData = {
    categoryLinkId: number;
};

export type BudgetsDeleteBudgetCategoryResponse = (unknown);

export type BudgetsGetBudgetStatusResponse = ((BudgetStatus | null));

export type DemoGetDemoAggregatedTransactionsData = {
    /**
     * Filter for transactions
     */
    accounts?: (Array<(string)> | null);
    /**
     * Filter for transactions
     */
    budgets?: (Array<(string)> | null);
    /**
     * Filter for transactions
     */
    categories?: (Array<(string)> | null);
    /**
     * List of grouping options in order (e.g. category, month)
     */
    groupBy?: Array<GroupByOption>;
    /**
     * Filter for transactions
     */
    months?: (Array<(string)> | null);
    /**
     * Filter for transactions
     */
    years?: (Array<(string)> | null);
};

export type DemoGetDemoAggregatedTransactionsResponse = (AggregatedTransactions);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserOut);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type OauthLoginGoogleResponse = (LoginGoogleData);

export type OauthGoogleCallbackData = {
    code: string;
    error?: (string | null);
};

export type OauthGoogleCallbackResponse = (GoogleCallbackData);

export type PlaidGetLinkTokenResponse = (PlaidLinkTokenResponse);

export type PlaidExchangeTokenData = {
    requestBody: PlaidExchangeTokenRequest;
};

export type PlaidExchangeTokenResponse = (Array<PlaidAccountResponse>);

export type PlaidGetPlaidAccountsResponse = (Array<PlaidAccountResponse>);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserOut);

export type SankeyGetSankeyDataResponse = (SankeyData);

export type SankeyCreateSankeyConfigData = {
    requestBody: SankeyConfigCreatePayload;
};

export type SankeyCreateSankeyConfigResponse = ({
    [key: string]: (boolean);
});

export type SankeyGetSankeyConfigInfoResponse = (SankeyConfigInfo);

export type SitemapSitemapResponse = (unknown);

export type SubscriptionGetSubscriptionStatusResponse = (SubscriptionDetails);

export type SubscriptionCheckSubscriptionLimitsResponse = (SubscriptionLimits);

export type SubscriptionGetSubscriptionPlansResponse = (Array<PriceDetails>);

export type SubscriptionCreateCheckoutSessionData = {
    priceId: number;
};

export type SubscriptionCreateCheckoutSessionResponse = (CheckoutSession);

export type SubscriptionCancelSubscriptionResponse = (Message);

export type SubscriptionStripeWebhookData = {
    stripeSignature?: string;
};

export type SubscriptionStripeWebhookResponse = ({
    [key: string]: (string);
});

export type SubscriptionSyncPricesResponse = (Message);

export type TransactionsGetTransactionsResponse = (Array<TransactionOut>);

export type TransactionsGetAggregatedTransactionsData = {
    /**
     * Filter for transactions
     */
    accounts?: (Array<(string)> | null);
    /**
     * Filter for transactions
     */
    budgets?: (Array<(string)> | null);
    /**
     * Filter for transactions
     */
    categories?: (Array<(string)> | null);
    /**
     * List of grouping options in order (e.g. category, month)
     */
    groupBy?: (Array<GroupByOption> | null);
    /**
     * Filter for transactions
     */
    months?: (Array<(string)> | null);
    /**
     * Filter for transactions
     */
    years?: (Array<(string)> | null);
};

export type TransactionsGetAggregatedTransactionsResponse = (AggregatedTransactions);

export type TransactionsUpdateTransactionData = {
    requestBody: TransactionEdit;
};

export type TransactionsUpdateTransactionResponse = (TransactionOut);

export type TransactionsListCategoriesData = {
    transactionId: number;
};

export type TransactionsListCategoriesResponse = (Array<CategoryOut>);

export type TransactionsListAllCategoriesResponse = (Array<CategoryOut>);

export type UploadsReprocessFileData = {
    jobId: number;
};

export type UploadsReprocessFileResponse = (ProcessFileJobOut);

export type UploadsGetUploadsResponse = (Array<UploadedPdfOut>);

export type UploadsUploadFilesData = {
    formData: Body_uploads_upload_files;
};

export type UploadsUploadFilesResponse = (Array<UploadedPdfOut>);

export type UploadsIsUploadingResponse = (boolean);

export type UploadsDeleteFileData = {
    fileId: number;
};

export type UploadsDeleteFileResponse = (unknown);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserRegister;
};

export type UsersCreateUserResponse = (UserOut);

export type UsersReadUserMeResponse = (UserOut);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserOut);

export type UsersUpdatePasswordMeData = {
    requestBody: UserNewPassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserOut);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserOut);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserOut);

export type UsersDeleteUserData = {
    userId: number;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);